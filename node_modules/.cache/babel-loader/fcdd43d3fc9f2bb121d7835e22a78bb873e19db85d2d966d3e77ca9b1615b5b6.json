{"ast":null,"code":"var _jsxFileName = \"/Users/guillermovarelli/Documents/workspace/v2/act-front/src/web/TodoTask.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STATUSES = [\"open\", \"block\", \"in_progress\", \"done\"];\nconst STATUS_LABELS = {\n  open: \"Open\",\n  block: \"Blocked\",\n  in_progress: \"In Progress\",\n  done: \"Done\"\n};\nexport default function TodoBoard() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    fetch(\"https://testtask.free.beeceptor.com/todo\").then(res => res.json()).then(data => {\n      // Normalizamos los estados (por si vienen con otro formato)\n      const normalized = data.map(t => ({\n        ...t,\n        status: t.status === \"completed\" ? \"done\" : t.status === \"in_progress\" ? \"in_progress\" : t.status || \"open\"\n      }));\n      setTasks(normalized);\n    }).catch(err => console.error(\"Error fetching tasks:\", err));\n  }, []);\n  const onDragEnd = result => {\n    if (!result.destination) return;\n    const {\n      source,\n      destination\n    } = result;\n    // Si se mueve entre columnas\n    if (source.droppableId !== destination.droppableId) {\n      const updatedTasks = tasks.map(task => task.id.toString() === result.draggableId ? {\n        ...task,\n        status: destination.droppableId\n      } : task);\n      setTasks(updatedTasks);\n    }\n  };\n  const getTasksByStatus = status => tasks.filter(task => task.status === status);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 bg-gray-100 min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-6 text-center\",\n      children: \"\\uD83D\\uDCCB Task Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-4 gap-4\",\n        children: STATUSES.map(status => /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: status,\n          children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            ...provided.droppableProps,\n            className: `rounded-lg p-4 min-h-[400px] bg-white shadow-md border-2 transition-all ${snapshot.isDraggingOver ? \"border-blue-400\" : \"border-gray-200\"}`,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"font-semibold text-lg mb-3 text-center text-gray-700\",\n              children: STATUS_LABELS[status]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 19\n            }, this), getTasksByStatus(status).map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: task.id.toString(),\n              index: index,\n              children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                className: `bg-blue-50 p-3 mb-3 rounded-lg shadow-sm border ${snapshot.isDragging ? \"bg-blue-100 border-blue-400\" : \"border-gray-200\"}`,\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"font-semibold text-gray-800\",\n                  children: task.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm text-gray-600\",\n                  children: task.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-xs text-gray-400 mt-1\",\n                  children: [task.startDate, \" \\u2192 \", task.endDate]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 25\n              }, this)\n            }, task.id.toString(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 21\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this)\n        }, status, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(TodoBoard, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = TodoBoard;\nvar _c;\n$RefreshReg$(_c, \"TodoBoard\");","map":{"version":3,"names":["React","useEffect","useState","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","STATUSES","STATUS_LABELS","open","block","in_progress","done","TodoBoard","_s","tasks","setTasks","fetch","then","res","json","data","normalized","map","t","status","catch","err","console","error","onDragEnd","result","destination","source","droppableId","updatedTasks","task","id","toString","draggableId","getTasksByStatus","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","provided","snapshot","ref","innerRef","droppableProps","isDraggingOver","index","draggableProps","dragHandleProps","isDragging","title","message","startDate","endDate","placeholder","_c","$RefreshReg$"],"sources":["/Users/guillermovarelli/Documents/workspace/v2/act-front/src/web/TodoTask.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\nconst STATUSES = [\"open\", \"block\", \"in_progress\", \"done\"];\nconst STATUS_LABELS = {\n  open: \"Open\",\n  block: \"Blocked\",\n  in_progress: \"In Progress\",\n  done: \"Done\"\n};\n\nexport default function TodoBoard() {\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://testtask.free.beeceptor.com/todo\")\n      .then((res) => res.json())\n      .then((data) => {\n        // Normalizamos los estados (por si vienen con otro formato)\n        const normalized = data.map((t) => ({\n          ...t,\n          status:\n            t.status === \"completed\"\n              ? \"done\"\n              : t.status === \"in_progress\"\n              ? \"in_progress\"\n              : t.status || \"open\"\n        }));\n        setTasks(normalized);\n      })\n      .catch((err) => console.error(\"Error fetching tasks:\", err));\n  }, []);\n\n  const onDragEnd = (result) => {\n    if (!result.destination) return;\n\n    const { source, destination } = result;\n    // Si se mueve entre columnas\n    if (source.droppableId !== destination.droppableId) {\n      const updatedTasks = tasks.map((task) =>\n        task.id.toString() === result.draggableId\n          ? { ...task, status: destination.droppableId }\n          : task\n      );\n      setTasks(updatedTasks);\n    }\n  };\n\n  const getTasksByStatus = (status) =>\n    tasks.filter((task) => task.status === status);\n\n  return (\n    <div className=\"p-6 bg-gray-100 min-h-screen\">\n      <h1 className=\"text-3xl font-bold mb-6 text-center\">ğŸ“‹ Task Board</h1>\n\n      <DragDropContext onDragEnd={onDragEnd}>\n        <div className=\"grid grid-cols-4 gap-4\">\n          {STATUSES.map((status) => (\n            <Droppable key={status} droppableId={status}>\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  {...provided.droppableProps}\n                  className={`rounded-lg p-4 min-h-[400px] bg-white shadow-md border-2 transition-all ${\n                    snapshot.isDraggingOver ? \"border-blue-400\" : \"border-gray-200\"\n                  }`}\n                >\n                  <h2 className=\"font-semibold text-lg mb-3 text-center text-gray-700\">\n                    {STATUS_LABELS[status]}\n                  </h2>\n\n                  {getTasksByStatus(status).map((task, index) => (\n                    <Draggable\n                      key={task.id.toString()}\n                      draggableId={task.id.toString()}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          className={`bg-blue-50 p-3 mb-3 rounded-lg shadow-sm border ${\n                            snapshot.isDragging\n                              ? \"bg-blue-100 border-blue-400\"\n                              : \"border-gray-200\"\n                          }`}\n                        >\n                          <h3 className=\"font-semibold text-gray-800\">{task.title}</h3>\n                          <p className=\"text-sm text-gray-600\">{task.message}</p>\n                          <p className=\"text-xs text-gray-400 mt-1\">\n                            {task.startDate} â†’ {task.endDate}\n                          </p>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          ))}\n        </div>\n      </DragDropContext>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}