{"ast":null,"code":"var _jsxFileName = \"/Users/guillermovarelli/Documents/workspace/v2/act-front/src/web/ApexChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport StatusModal from \"../form/StatusModal\";\nimport { FormControl, InputLabel, MenuItem, Select, Switch, FormControlLabel } from \"@mui/material\";\nimport \"@fontsource/roboto\";\nimport \"@fontsource/montserrat\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://44.204.238.86:80/activities/grouped\";\nconst parseDate = dateStr => {\n  const [day, month, year] = dateStr.split(\"-\").map(Number);\n  return `${year}-${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n};\nconst transformData = data => {\n  const recordsByMonth = {};\n  Object.entries(data.activities).forEach(([activity, records]) => {\n    records.forEach(record => {\n      const formattedDate = parseDate(record.date);\n      if (!recordsByMonth[formattedDate]) recordsByMonth[formattedDate] = {};\n      recordsByMonth[formattedDate][activity] = record.status;\n    });\n  });\n  return recordsByMonth;\n};\nconst mapStatusToValue = status => {\n  var _statusMap$normalized;\n  const normalized = (status || \"\").toLowerCase();\n  const statusMap = {\n    failed: 0.2,\n    regular: 0.5,\n    suck: 0.001,\n    accomplished: 1,\n    excellence: 1.2\n  };\n  return (_statusMap$normalized = statusMap[normalized]) !== null && _statusMap$normalized !== void 0 ? _statusMap$normalized : null;\n};\n\n// ðŸŽ¨ Colores suaves\nconst STATUS_COLORS = {\n  suck: \"#e0e0e0\",\n  // gris muy claro\n  failed: \"#ef9a9a\",\n  // rojo mÃ¡s intenso\n  regular: \"#fff176\",\n  // amarillo mÃ¡s visible\n  acomplished: \"#81c784\",\n  // verde equilibrado\n  excellence: \"#bbdefb\",\n  // azul claro\n  noStatus: \"#ffffff\" // blanco\n};\nconst ApexChart = () => {\n  _s();\n  const [charts, setCharts] = useState({});\n  const [selectedMonth, setSelectedMonth] = useState(\"01\");\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [selectedStatus, setSelectedStatus] = useState(null);\n  const [showAll, setShowAll] = useState(true);\n  const fetchData = () => {\n    fetch(API_URL).then(response => response.json()).then(data => {\n      const transformedData = transformData(data);\n      const chartConfigs = {};\n      Object.entries(transformedData).forEach(([date, records]) => {\n        const month = date.split(\"-\")[1];\n        if (!chartConfigs[month]) chartConfigs[month] = {\n          records: {},\n          series: []\n        };\n        chartConfigs[month].records[date] = records;\n      });\n      Object.keys(chartConfigs).forEach(month => {\n        const records = chartConfigs[month].records;\n        const uniqueDates = Object.keys(records).sort((a, b) => new Date(a) - new Date(b));\n        const activities = [...new Set(Object.values(records).flatMap(Object.keys))];\n        chartConfigs[month].series = activities.map(activity => ({\n          name: activity,\n          data: uniqueDates.map(date => {\n            var _records$date;\n            const status = ((_records$date = records[date]) === null || _records$date === void 0 ? void 0 : _records$date[activity]) || \"\";\n            return {\n              x: date,\n              y: mapStatusToValue(status),\n              date,\n              status: status || \"no status\",\n              activity\n            };\n          })\n        }));\n      });\n      setCharts(chartConfigs);\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const handleCellClick = (event, chartContext, config) => {\n    var _charts$selectedMonth;\n    const {\n      dataPointIndex,\n      seriesIndex\n    } = config;\n    if (dataPointIndex === undefined || seriesIndex === undefined) return;\n    const selectedSeries = (_charts$selectedMonth = charts[selectedMonth]) === null || _charts$selectedMonth === void 0 ? void 0 : _charts$selectedMonth.series[seriesIndex];\n    if (!selectedSeries) return;\n    const clickedData = selectedSeries.data[dataPointIndex];\n    setSelectedCell({\n      ...clickedData,\n      date: clickedData.date\n    });\n  };\n  const handleStatusClick = status => {\n    setSelectedStatus(prev => prev === status ? null : status);\n  };\n  const filterSeriesByStatus = series => {\n    if (!selectedStatus) return series;\n    return series.map(s => ({\n      ...s,\n      data: s.data.map(d => ({\n        ...d,\n        y: d.status.toLowerCase() === selectedStatus.toLowerCase() ? d.y : null\n      }))\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      marginTop: \"1.5rem\",\n      fontFamily: \"Roboto, sans-serif\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"55%\",\n        padding: \"1rem\",\n        backgroundColor: \"white\",\n        borderRadius: \"1rem\",\n        boxShadow: \"0 4px 10px rgba(0,0,0,0.1)\",\n        marginBottom: 0,\n        transition: \"all 0.4s ease\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          marginBottom: \"1rem\"\n        },\n        children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Switch, {\n            checked: showAll,\n            onChange: () => setShowAll(!showAll),\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this),\n          label: showAll ? \"Hide Chart\" : \"Show Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), showAll && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            width: \"100%\",\n            marginBottom: 0\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              marginLeft: \"0%\"\n            },\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              variant: \"outlined\",\n              style: {\n                minWidth: 150\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                children: \"Mes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Select, {\n                value: selectedMonth,\n                onChange: e => setSelectedMonth(e.target.value),\n                label: \"Mes\",\n                children: Array.from({\n                  length: 12\n                }, (_, i) => {\n                  const month = (i + 1).toString().padStart(2, \"0\");\n                  return /*#__PURE__*/_jsxDEV(MenuItem, {\n                    value: month,\n                    children: new Date(2024, i).toLocaleString(\"default\", {\n                      month: \"long\"\n                    })\n                  }, month, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 174,\n                    columnNumber: 25\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              flexGrow: 1,\n              gap: \"12px\",\n              marginRight: \"22%\"\n            },\n            children: Object.entries({\n              suck: \"Suck\",\n              failed: \"Failed\",\n              regular: \"Regular\",\n              accomplished: \"Accomplished\",\n              excellence: \"Excellence\"\n            }).map(([key, label]) => /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: () => handleStatusClick(key),\n              style: {\n                fontFamily: \"Montserrat, sans-serif\",\n                fontWeight: \"500\",\n                cursor: \"pointer\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  display: \"inline-block\",\n                  width: 10,\n                  height: 10,\n                  backgroundColor: STATUS_COLORS[key],\n                  border: \"1px solid #aaa\",\n                  marginRight: 5\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 21\n              }, this), label]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), charts[selectedMonth] && /*#__PURE__*/_jsxDEV(ReactApexChart, {\n          options: {\n            chart: {\n              type: \"heatmap\",\n              events: {\n                dataPointSelection: handleCellClick\n              },\n              toolbar: {\n                show: true,\n                tools: {\n                  download: false\n                }\n              }\n            },\n            plotOptions: {\n              heatmap: {\n                shadeIntensity: 0.5,\n                radius: 0,\n                colorScale: {\n                  ranges: [{\n                    from: 0.001,\n                    to: 0.001,\n                    name: \"Suck\",\n                    color: STATUS_COLORS.suck\n                  }, {\n                    from: 0.2,\n                    to: 0.2,\n                    name: \"Failed\",\n                    color: STATUS_COLORS.failed\n                  }, {\n                    from: 0.5,\n                    to: 0.5,\n                    name: \"Regular\",\n                    color: STATUS_COLORS.regular\n                  }, {\n                    from: 1,\n                    to: 1,\n                    name: \"Accomplished\",\n                    color: STATUS_COLORS.accomplished\n                  }, {\n                    from: 1.2,\n                    to: 1.2,\n                    name: \"Excellence\",\n                    color: STATUS_COLORS.excellence\n                  }, {\n                    from: null,\n                    to: null,\n                    name: \"No Status\",\n                    color: STATUS_COLORS.noStatus\n                  }]\n                }\n              }\n            },\n            legend: {\n              show: false\n            },\n            dataLabels: {\n              enabled: false\n            },\n            xaxis: {\n              type: \"category\",\n              labels: {\n                formatter: val => val.split(\"-\")[2],\n                style: {\n                  fontSize: \"16px\",\n                  fontFamily: \"Roboto, sans-serif\",\n                  fontWeight: 400\n                }\n              }\n            },\n            yaxis: {\n              labels: {\n                style: {\n                  fontSize: \"16px\",\n                  fontFamily: \"Roboto, sans-serif\",\n                  fontWeight: 400\n                }\n              }\n            }\n          },\n          series: filterSeriesByStatus(charts[selectedMonth].series),\n          type: \"heatmap\",\n          height: \"150%\",\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(StatusModal, {\n          selectedCell: selectedCell,\n          setSelectedCell: setSelectedCell,\n          refreshData: fetchData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(ApexChart, \"Ef2A4gFSBTzqRhp5xD0sjk42e9s=\");\n_c = ApexChart;\nexport default ApexChart;\nvar _c;\n$RefreshReg$(_c, \"ApexChart\");","map":{"version":3,"names":["React","useEffect","useState","ReactApexChart","StatusModal","FormControl","InputLabel","MenuItem","Select","Switch","FormControlLabel","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","parseDate","dateStr","day","month","year","split","map","Number","toString","padStart","transformData","data","recordsByMonth","Object","entries","activities","forEach","activity","records","record","formattedDate","date","status","mapStatusToValue","_statusMap$normalized","normalized","toLowerCase","statusMap","failed","regular","suck","accomplished","excellence","STATUS_COLORS","acomplished","noStatus","ApexChart","_s","charts","setCharts","selectedMonth","setSelectedMonth","selectedCell","setSelectedCell","selectedStatus","setSelectedStatus","showAll","setShowAll","fetchData","fetch","then","response","json","transformedData","chartConfigs","series","keys","uniqueDates","sort","a","b","Date","Set","values","flatMap","name","_records$date","x","y","catch","error","console","handleCellClick","event","chartContext","config","_charts$selectedMonth","dataPointIndex","seriesIndex","undefined","selectedSeries","clickedData","handleStatusClick","prev","filterSeriesByStatus","s","d","style","display","justifyContent","marginTop","fontFamily","children","width","padding","backgroundColor","borderRadius","boxShadow","marginBottom","transition","control","checked","onChange","color","fileName","_jsxFileName","lineNumber","columnNumber","label","marginLeft","variant","minWidth","value","e","target","Array","from","length","_","i","toLocaleString","alignItems","flexGrow","gap","marginRight","key","onClick","fontWeight","cursor","height","border","options","chart","type","events","dataPointSelection","toolbar","show","tools","download","plotOptions","heatmap","shadeIntensity","radius","colorScale","ranges","to","legend","dataLabels","enabled","xaxis","labels","formatter","val","fontSize","yaxis","refreshData","_c","$RefreshReg$"],"sources":["/Users/guillermovarelli/Documents/workspace/v2/act-front/src/web/ApexChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport StatusModal from \"../form/StatusModal\";\nimport { FormControl, InputLabel, MenuItem, Select, Switch, FormControlLabel } from \"@mui/material\";\n\nimport \"@fontsource/roboto\";\nimport \"@fontsource/montserrat\";\n\nconst API_URL = \"http://44.204.238.86:80/activities/grouped\";\n\nconst parseDate = (dateStr) => {\n  const [day, month, year] = dateStr.split(\"-\").map(Number);\n  return `${year}-${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n};\n\nconst transformData = (data) => {\n  const recordsByMonth = {};\n  Object.entries(data.activities).forEach(([activity, records]) => {\n    records.forEach((record) => {\n      const formattedDate = parseDate(record.date);\n      if (!recordsByMonth[formattedDate]) recordsByMonth[formattedDate] = {};\n      recordsByMonth[formattedDate][activity] = record.status;\n    });\n  });\n  return recordsByMonth;\n};\n\nconst mapStatusToValue = (status) => {\n  const normalized = (status || \"\").toLowerCase();\n  const statusMap = {\n    failed: 0.2,\n    regular: 0.5,\n    suck: 0.001,\n    accomplished: 1,\n    excellence: 1.2,\n  };\n  return statusMap[normalized] ?? null;\n};\n\n// ðŸŽ¨ Colores suaves\nconst STATUS_COLORS = {\n  suck: \"#e0e0e0\",         // gris muy claro\n  failed: \"#ef9a9a\",      // rojo mÃ¡s intenso\n  regular: \"#fff176\",     // amarillo mÃ¡s visible\n  acomplished: \"#81c784\", // verde equilibrado\n  excellence: \"#bbdefb\",   // azul claro\n  noStatus: \"#ffffff\",     // blanco\n\n};\n\nconst ApexChart = () => {\n  const [charts, setCharts] = useState({});\n  const [selectedMonth, setSelectedMonth] = useState(\"01\");\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [selectedStatus, setSelectedStatus] = useState(null);\n  const [showAll, setShowAll] = useState(true);\n\n  const fetchData = () => {\n    fetch(API_URL)\n      .then((response) => response.json())\n      .then((data) => {\n        const transformedData = transformData(data);\n        const chartConfigs = {};\n\n        Object.entries(transformedData).forEach(([date, records]) => {\n          const month = date.split(\"-\")[1];\n          if (!chartConfigs[month]) chartConfigs[month] = { records: {}, series: [] };\n          chartConfigs[month].records[date] = records;\n        });\n\n        Object.keys(chartConfigs).forEach((month) => {\n          const records = chartConfigs[month].records;\n          const uniqueDates = Object.keys(records).sort((a, b) => new Date(a) - new Date(b));\n          const activities = [...new Set(Object.values(records).flatMap(Object.keys))];\n\n          chartConfigs[month].series = activities.map((activity) => ({\n            name: activity,\n            data: uniqueDates.map((date) => {\n              const status = records[date]?.[activity] || \"\";\n              return {\n                x: date,\n                y: mapStatusToValue(status),\n                date,\n                status: status || \"no status\",\n                activity,\n              };\n            }),\n          }));\n        });\n\n        setCharts(chartConfigs);\n      })\n      .catch((error) => console.error(\"Error fetching data:\", error));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const handleCellClick = (event, chartContext, config) => {\n    const { dataPointIndex, seriesIndex } = config;\n    if (dataPointIndex === undefined || seriesIndex === undefined) return;\n\n    const selectedSeries = charts[selectedMonth]?.series[seriesIndex];\n    if (!selectedSeries) return;\n\n    const clickedData = selectedSeries.data[dataPointIndex];\n    setSelectedCell({ ...clickedData, date: clickedData.date });\n  };\n\n  const handleStatusClick = (status) => {\n    setSelectedStatus((prev) => (prev === status ? null : status));\n  };\n\n  const filterSeriesByStatus = (series) => {\n    if (!selectedStatus) return series;\n    return series.map((s) => ({\n      ...s,\n      data: s.data.map((d) => ({\n        ...d,\n        y: d.status.toLowerCase() === selectedStatus.toLowerCase() ? d.y : null,\n      })),\n    }));\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        marginTop: \"1.5rem\",\n        fontFamily: \"Roboto, sans-serif\",\n      }}\n    >\n      <div\n        style={{\n          width: \"55%\",\n          padding: \"1rem\",\n          backgroundColor: \"white\",\n          borderRadius: \"1rem\",\n          boxShadow: \"0 4px 10px rgba(0,0,0,0.1)\",\n          marginBottom: 0,\n          transition: \"all 0.4s ease\",\n        }}\n      >\n        {/* ðŸ”˜ Toggle arriba a la derecha */}\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginBottom: \"1rem\" }}>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={showAll}\n                onChange={() => setShowAll(!showAll)}\n                color=\"primary\"\n              />\n            }\n            label={showAll ? \"Hide Chart\" : \"Show Chart\"}\n          />\n        </div>\n\n        {showAll && (\n          <>\n            <div style={{ display: \"flex\", width: \"100%\", marginBottom: 0 }}>\n              <div style={{ display: \"flex\", marginLeft: \"0%\" }}>\n                <FormControl variant=\"outlined\" style={{ minWidth: 150 }}>\n                  <InputLabel>Mes</InputLabel>\n                  <Select\n                    value={selectedMonth}\n                    onChange={(e) => setSelectedMonth(e.target.value)}\n                    label=\"Mes\"\n                  >\n                    {Array.from({ length: 12 }, (_, i) => {\n                      const month = (i + 1).toString().padStart(2, \"0\");\n                      return (\n                        <MenuItem key={month} value={month}>\n                          {new Date(2024, i).toLocaleString(\"default\", {\n                            month: \"long\",\n                          })}\n                        </MenuItem>\n                      );\n                    })}\n                  </Select>\n                </FormControl>\n              </div>\n\n              {/* ðŸ”¹ Indicadores de estado con colores suaves */}\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                  flexGrow: 1,\n                  gap: \"12px\",\n                  marginRight: \"22%\",\n                }}\n              >\n                {Object.entries({\n                  suck: \"Suck\",\n                  failed: \"Failed\",\n                  regular: \"Regular\",\n                  accomplished: \"Accomplished\",\n                  excellence: \"Excellence\",\n                }).map(([key, label]) => (\n                  <span\n                    key={key}\n                    onClick={() => handleStatusClick(key)}\n                    style={{\n                      fontFamily: \"Montserrat, sans-serif\",\n                      fontWeight: \"500\",\n                      cursor: \"pointer\",\n                    }}\n                  >\n                    <span\n                      style={{\n                        display: \"inline-block\",\n                        width: 10,\n                        height: 10,\n                        backgroundColor: STATUS_COLORS[key],\n                        border: \"1px solid #aaa\",\n                        marginRight: 5,\n                      }}\n                    ></span>\n                    {label}\n                  </span>\n                ))}\n              </div>\n            </div>\n\n            {charts[selectedMonth] && (\n              <ReactApexChart\n                options={{\n                  chart: {\n                    type: \"heatmap\",\n                    events: { dataPointSelection: handleCellClick },\n                    toolbar: { show: true, tools: { download: false } },\n                  },\n                  plotOptions: {\n                    heatmap: {\n                      shadeIntensity: 0.5,\n                      radius: 0,\n                      colorScale: {\n                        ranges: [\n                          { from: 0.001, to: 0.001, name: \"Suck\", color: STATUS_COLORS.suck },\n                          { from: 0.2, to: 0.2, name: \"Failed\", color: STATUS_COLORS.failed },\n                          { from: 0.5, to: 0.5, name: \"Regular\", color: STATUS_COLORS.regular },\n                          { from: 1, to: 1, name: \"Accomplished\", color: STATUS_COLORS.accomplished },\n                          { from: 1.2, to: 1.2, name: \"Excellence\", color: STATUS_COLORS.excellence },\n                          { from: null, to: null, name: \"No Status\", color: STATUS_COLORS.noStatus },\n                        ],\n                      },\n                    },\n                  },\n                  legend: { show: false },\n                  dataLabels: { enabled: false },\n                  xaxis: {\n                    type: \"category\",\n                    labels: {\n                      formatter: (val) => val.split(\"-\")[2],\n                      style: {\n                        fontSize: \"16px\",\n                        fontFamily: \"Roboto, sans-serif\",\n                        fontWeight: 400,\n                      },\n                    },\n                  },\n                  yaxis: {\n                    labels: {\n                      style: {\n                        fontSize: \"16px\",\n                        fontFamily: \"Roboto, sans-serif\",\n                        fontWeight: 400,\n                      },\n                    },\n                  },\n                }}\n                series={filterSeriesByStatus(charts[selectedMonth].series)}\n                type=\"heatmap\"\n                height=\"150%\"\n                width=\"100%\"\n              />\n            )}\n\n            <StatusModal\n              selectedCell={selectedCell}\n              setSelectedCell={setSelectedCell}\n              refreshData={fetchData}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ApexChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}