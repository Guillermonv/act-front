{"ast":null,"code":"var _jsxFileName = \"/Users/guillermovarelli/Documents/workspace/act-front/src/ApexChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"https://activit.free.beeceptor.com/api/v3/activities\";\n\n// Función para convertir la fecha de DD-MM-YYYY a YYYY-MM-DD\nconst parseDate = dateStr => {\n  const [day, month, year] = dateStr.split(\"-\").map(Number);\n  return `${year}-${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n};\n\n// Transformar los datos para que las fechas sean las filas y las actividades las columnas\nconst transformData = data => {\n  const activityNames = Object.keys(data.activities);\n\n  // Obtener todas las fechas únicas\n  const uniqueDates = [...new Set(Object.values(data.activities).flatMap(records => records.map(({\n    date\n  }) => parseDate(date))))].sort();\n\n  // Construimos la serie basada en fechas\n  return uniqueDates.map(date => ({\n    name: date,\n    // Fechas en el eje Y\n    data: activityNames.map(activity => {\n      var _data$activities$acti;\n      // Buscar si hay un registro para esta actividad y esta fecha\n      const record = (_data$activities$acti = data.activities[activity]) === null || _data$activities$acti === void 0 ? void 0 : _data$activities$acti.find(r => parseDate(r.date) === date);\n      let yValue = null;\n      if (record) {\n        if (record.status === \"accomplished\") yValue = 1;else if (record.status === \"failed\") yValue = 0;else if (record.status === \"regular\") yValue = 0.5;\n      }\n      return {\n        x: activity,\n        y: yValue\n      }; // Actividades en el eje X\n    })\n  }));\n};\nconst ApexChart = () => {\n  _s();\n  const [chartData, setChartData] = useState({\n    series: [],\n    options: {}\n  });\n  useEffect(() => {\n    fetch(API_URL).then(response => response.json()).then(data => {\n      const series = transformData(data);\n      setChartData({\n        series,\n        options: {\n          chart: {\n            height: 9000,\n            type: \"heatmap\"\n          },\n          plotOptions: {\n            heatmap: {\n              shadeIntensity: 0.5,\n              radius: 0,\n              useFillColorAsStroke: true,\n              colorScale: {\n                ranges: [{\n                  from: 0,\n                  to: 0,\n                  name: \"Failed\",\n                  color: \"#FF0000\"\n                }, {\n                  from: 1,\n                  to: 1,\n                  name: \"Accomplished\",\n                  color: \"#00A100\"\n                }, {\n                  from: 0.5,\n                  to: 0.5,\n                  name: \"Regular\",\n                  color: \"#FFFF00\"\n                }]\n              }\n            }\n          },\n          dataLabels: {\n            enabled: false\n          },\n          title: {\n            text: \"Activity HeatMap\"\n          },\n          xaxis: {\n            type: \"category\",\n            title: {\n              text: \"Activities\"\n            } // Actividades en el eje X\n          },\n          yaxis: {\n            title: {\n              text: \"Dates\"\n            },\n            // Fechas en el eje Y\n            labels: {\n              style: {\n                fontSize: \"12px\",\n                minHeight: 200 // Asegura que cada fila tenga espacio suficiente\n              }\n            }\n          }\n        }\n      });\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Activity Heatmap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      options: chartData.options,\n      series: chartData.series,\n      type: \"heatmap\",\n      height: 9000\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(ApexChart, \"8upgyZxrcARtwMbQC3404UkohD4=\");\n_c = ApexChart;\nexport default ApexChart;\nvar _c;\n$RefreshReg$(_c, \"ApexChart\");","map":{"version":3,"names":["React","useEffect","useState","ReactApexChart","jsxDEV","_jsxDEV","API_URL","parseDate","dateStr","day","month","year","split","map","Number","toString","padStart","transformData","data","activityNames","Object","keys","activities","uniqueDates","Set","values","flatMap","records","date","sort","name","activity","_data$activities$acti","record","find","r","yValue","status","x","y","ApexChart","_s","chartData","setChartData","series","options","fetch","then","response","json","chart","height","type","plotOptions","heatmap","shadeIntensity","radius","useFillColorAsStroke","colorScale","ranges","from","to","color","dataLabels","enabled","title","text","xaxis","yaxis","labels","style","fontSize","minHeight","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/guillermovarelli/Documents/workspace/act-front/src/ApexChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\n\nconst API_URL = \"https://activit.free.beeceptor.com/api/v3/activities\";\n\n// Función para convertir la fecha de DD-MM-YYYY a YYYY-MM-DD\nconst parseDate = (dateStr) => {\n  const [day, month, year] = dateStr.split(\"-\").map(Number);\n  return `${year}-${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n};\n\n// Transformar los datos para que las fechas sean las filas y las actividades las columnas\nconst transformData = (data) => {\n  const activityNames = Object.keys(data.activities);\n\n  // Obtener todas las fechas únicas\n  const uniqueDates = [\n    ...new Set(Object.values(data.activities).flatMap((records) => records.map(({ date }) => parseDate(date)))),\n  ].sort();\n\n  // Construimos la serie basada en fechas\n  return uniqueDates.map((date) => ({\n    name: date, // Fechas en el eje Y\n    data: activityNames.map((activity) => {\n      // Buscar si hay un registro para esta actividad y esta fecha\n      const record = data.activities[activity]?.find((r) => parseDate(r.date) === date);\n      let yValue = null;\n      if (record) {\n        if (record.status === \"accomplished\") yValue = 1;\n        else if (record.status === \"failed\") yValue = 0;\n        else if (record.status === \"regular\") yValue = 0.5;\n      }\n\n      return { x: activity, y: yValue }; // Actividades en el eje X\n    }),\n  }));\n};\n\nconst ApexChart = () => {\n  const [chartData, setChartData] = useState({ series: [], options: {} });\n\n  useEffect(() => {\n    fetch(API_URL)\n      .then((response) => response.json())\n      .then((data) => {\n        const series = transformData(data);\n\n        setChartData({\n          series,\n          options: {\n            chart: {\n              height: 9000,\n              type: \"heatmap\",\n            },\n            plotOptions: {\n              heatmap: {\n                shadeIntensity: 0.5,\n                radius: 0,\n                useFillColorAsStroke: true,\n                colorScale: {\n                  ranges: [\n                    { from: 0, to: 0, name: \"Failed\", color: \"#FF0000\" },\n                    { from: 1, to: 1, name: \"Accomplished\", color: \"#00A100\" },\n                    { from: 0.5, to: 0.5, name: \"Regular\", color: \"#FFFF00\" },\n                  ],\n                },\n              },\n            },\n            dataLabels: {\n              enabled: false,\n            },\n            title: {\n              text: \"Activity HeatMap\",\n            },\n            xaxis: {\n              type: \"category\",\n              title: { text: \"Activities\" }, // Actividades en el eje X\n            },\n            yaxis: {\n              title: { text: \"Dates\" }, // Fechas en el eje Y\n              labels: {\n                style: {\n                  fontSize: \"12px\",\n                  minHeight: 200,  // Asegura que cada fila tenga espacio suficiente\n                },\n              },\n            },\n          },\n        });\n      })\n      .catch((error) => console.error(\"Error fetching data:\", error));\n  }, []);\n\n  return (\n    <div>\n      <h2>Activity Heatmap</h2>\n      <ReactApexChart options={chartData.options} series={chartData.series} type=\"heatmap\" height={9000} />\n    </div>\n  );\n};\n\nexport default ApexChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}