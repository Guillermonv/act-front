{"ast":null,"code":"var _jsxFileName = \"/Users/guillermovarelli/Documents/workspace/act-front/src/ApexChartMobile.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"https://activit.free.beeceptor.com/api/v3/activities\";\n\n// Función para parsear la fecha en formato MM-DD\nconst parseDate = dateStr => {\n  if (!dateStr || typeof dateStr !== \"string\") return null; // Evita errores\n  const [day, month] = dateStr.split(\"-\").map(Number);\n  if (!day || !month) return null; // Verifica que sean números válidos\n  return `${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n};\n\n// Función para formatear las fechas en el eje Y\nconst formatDateForYAxis = dateStr => {\n  if (!dateStr || typeof dateStr !== \"string\") return \"\"; // Devuelve vacío en vez de \"N/A\"\n  const [month, day] = dateStr.split(\"-\");\n  return month && day ? `${month}-${day}` : \"\";\n};\n\n// Transforma los datos para el heatmap\nconst transformData = data => {\n  console.log(\"API response:\", data); // Para depuración\n\n  if (!data || !data.activities) return [];\n  const activityNames = Object.keys(data.activities);\n  const uniqueDates = [...new Set(Object.values(data.activities).flatMap(records => records.map(({\n    date\n  }) => parseDate(date))).filter(Boolean) // FILTRA valores nulos o inválidos\n  )].sort();\n  return uniqueDates.map(date => ({\n    name: date,\n    data: activityNames.map(activity => {\n      const records = data.activities[activity] || [];\n      const record = records.find(r => parseDate(r.date) === date);\n      if (!record) return null; // No agrega si no hay datos válidos\n\n      let yValue = null;\n      if (record.status === \"accomplished\") yValue = 1;else if (record.status === \"suck\") yValue = 0;else if (record.status === \"regular\") yValue = 0.5;else if (record.status === \"failed\") yValue = 0.2;else if (record.status === \"exellence\") yValue = 1.2;\n      return yValue !== null ? {\n        x: activity,\n        y: yValue\n      } : null;\n    }).filter(Boolean) // FILTRA valores nulos\n  })).filter(series => series.data.length > 0); // Elimina series vacías\n};\nconst ApexChartMobile = () => {\n  _s();\n  const [chartData, setChartData] = useState({\n    series: [],\n    options: {}\n  });\n  useEffect(() => {\n    fetch(API_URL).then(response => response.json()).then(data => {\n      const series = transformData(data);\n      console.log(\"Series final:\", series); // Verificar si hay undefined\n\n      setChartData({\n        series,\n        options: {\n          chart: {\n            height: 10600,\n            width: 500,\n            type: \"heatmap\"\n          },\n          plotOptions: {\n            heatmap: {\n              shadeIntensity: 0.7,\n              radius: 0,\n              useFillColorAsStroke: false,\n              colorScale: {\n                ranges: [{\n                  from: 0,\n                  to: 0,\n                  name: \"Suck\",\n                  color: \"#000000zs\"\n                }, {\n                  from: 0.2,\n                  to: 0.2,\n                  name: \"Failed\",\n                  color: \"#FF0000\"\n                }, {\n                  from: 0.5,\n                  to: 0.5,\n                  name: \"Regular\",\n                  color: \"#FFFF00\"\n                }, {\n                  from: 1,\n                  to: 1,\n                  name: \"Accomplished\",\n                  color: \"#00A100\"\n                }, {\n                  from: 1.2,\n                  to: 1.2,\n                  name: \"Excellence\",\n                  color: \"#0000FF\"\n                }]\n              }\n            }\n          },\n          dataLabels: {\n            enabled: false\n          },\n          xaxis: {\n            type: \"category\",\n            position: \"top\",\n            labels: {\n              rotate: -90,\n              style: {\n                fontSize: \"14px\",\n                fontWeight: 600\n              }\n            }\n          },\n          yaxis: {\n            title: {\n              text: \"Dates\"\n            },\n            opposite: false,\n            labels: {\n              formatter: value => {\n                console.log(\"y-axis value:\", value); // Depuración\n                return formatDateForYAxis(value);\n              },\n              style: {\n                fontSize: \"14px\",\n                fontWeight: 600\n              }\n            }\n          },\n          grid: {\n            padding: {\n              right: 5,\n              left: 5\n            }\n          }\n        }\n      });\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ReactApexChart, {\n      options: chartData.options,\n      series: chartData.series,\n      type: \"heatmap\",\n      height: 10600,\n      width: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n_s(ApexChartMobile, \"8upgyZxrcARtwMbQC3404UkohD4=\");\n_c = ApexChartMobile;\nexport default ApexChartMobile;\nvar _c;\n$RefreshReg$(_c, \"ApexChartMobile\");","map":{"version":3,"names":["React","useEffect","useState","ReactApexChart","jsxDEV","_jsxDEV","API_URL","parseDate","dateStr","day","month","split","map","Number","toString","padStart","formatDateForYAxis","transformData","data","console","log","activities","activityNames","Object","keys","uniqueDates","Set","values","flatMap","records","date","filter","Boolean","sort","name","activity","record","find","r","yValue","status","x","y","series","length","ApexChartMobile","_s","chartData","setChartData","options","fetch","then","response","json","chart","height","width","type","plotOptions","heatmap","shadeIntensity","radius","useFillColorAsStroke","colorScale","ranges","from","to","color","dataLabels","enabled","xaxis","position","labels","rotate","style","fontSize","fontWeight","yaxis","title","text","opposite","formatter","value","grid","padding","right","left","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/guillermovarelli/Documents/workspace/act-front/src/ApexChartMobile.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\n\nconst API_URL = \"https://activit.free.beeceptor.com/api/v3/activities\";\n\n// Función para parsear la fecha en formato MM-DD\nconst parseDate = (dateStr) => {\n  if (!dateStr || typeof dateStr !== \"string\") return null; // Evita errores\n  const [day, month] = dateStr.split(\"-\").map(Number);\n  if (!day || !month) return null; // Verifica que sean números válidos\n  return `${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n};\n\n// Función para formatear las fechas en el eje Y\nconst formatDateForYAxis = (dateStr) => {\n  if (!dateStr || typeof dateStr !== \"string\") return \"\"; // Devuelve vacío en vez de \"N/A\"\n  const [month, day] = dateStr.split(\"-\");\n  return month && day ? `${month}-${day}` : \"\";\n};\n\n// Transforma los datos para el heatmap\nconst transformData = (data) => {\n  console.log(\"API response:\", data); // Para depuración\n\n  if (!data || !data.activities) return [];\n\n  const activityNames = Object.keys(data.activities);\n  const uniqueDates = [...new Set(\n    Object.values(data.activities)\n      .flatMap((records) => records.map(({ date }) => parseDate(date)))\n      .filter(Boolean) // FILTRA valores nulos o inválidos\n  )].sort();\n\n  return uniqueDates.map((date) => ({\n    name: date,\n    data: activityNames\n      .map((activity) => {\n        const records = data.activities[activity] || [];\n        const record = records.find((r) => parseDate(r.date) === date);\n\n        if (!record) return null; // No agrega si no hay datos válidos\n\n        let yValue = null;\n        if (record.status === \"accomplished\") yValue = 1;\n        else if (record.status === \"suck\") yValue = 0;\n        else if (record.status === \"regular\") yValue = 0.5;\n        else if (record.status === \"failed\") yValue = 0.2;\n        else if (record.status === \"exellence\") yValue = 1.2;\n\n        return yValue !== null ? { x: activity, y: yValue } : null;\n      })\n      .filter(Boolean), // FILTRA valores nulos\n  })).filter((series) => series.data.length > 0); // Elimina series vacías\n};\n\nconst ApexChartMobile = () => {\n  const [chartData, setChartData] = useState({ series: [], options: {} });\n\n  useEffect(() => {\n    fetch(API_URL)\n      .then((response) => response.json())\n      .then((data) => {\n        const series = transformData(data);\n        console.log(\"Series final:\", series); // Verificar si hay undefined\n\n        setChartData({\n          series,\n          options: {\n            chart: {\n              height: 10600,\n              width: 500,\n              type: \"heatmap\",\n            },\n            plotOptions: {\n              heatmap: {\n                shadeIntensity: 0.7,\n                radius: 0,\n                useFillColorAsStroke: false,\n                colorScale: {\n                  ranges: [\n                    { from: 0, to: 0, name: \"Suck\", color: \"#000000zs\" },\n                    { from: 0.2, to: 0.2, name: \"Failed\", color: \"#FF0000\" },\n                    { from: 0.5, to: 0.5, name: \"Regular\", color: \"#FFFF00\" },\n                    { from: 1, to: 1, name: \"Accomplished\", color: \"#00A100\" },\n                    { from: 1.2, to: 1.2, name: \"Excellence\", color: \"#0000FF\" },\n                  ],\n                },\n              },\n            },\n            dataLabels: {\n              enabled: false,\n            },\n            xaxis: {\n              type: \"category\",\n              position: \"top\",\n              labels: {\n                rotate: -90,\n                style: {\n                  fontSize: \"14px\",\n                  fontWeight: 600,\n                },\n              },\n            },\n            yaxis: {\n              title: { text: \"Dates\" },\n              opposite: false,\n              labels: {\n                formatter: (value) => {\n                  console.log(\"y-axis value:\", value); // Depuración\n                  return formatDateForYAxis(value);\n                },\n                style: {\n                  fontSize: \"14px\",\n                  fontWeight: 600,\n                },\n              },\n            },\n            grid: {\n              padding: { right: 5, left: 5 },\n            },\n          },\n        });\n      })\n      .catch((error) => console.error(\"Error fetching data:\", error));\n  }, []);\n\n  return (\n    <div>\n      <ReactApexChart options={chartData.options} series={chartData.series} type=\"heatmap\" height={10600} width={500} />\n      <br />\n    </div>\n  );\n};\n\nexport default ApexChartMobile;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}