{"ast":null,"code":"var _jsxFileName = \"/Users/guillermovarelli/Documents/workspace/act-front/src/ApexChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport StatusModal from \"./form/StatusModal\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8080/activities/grouped\";\nconst parseDate = dateStr => {\n  const [day, month, year] = dateStr.split(\"-\").map(Number);\n  return `${year}-${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n};\nconst transformData = data => {\n  const recordsByMonth = {};\n  Object.entries(data.activities).forEach(([activity, records]) => {\n    records.forEach(record => {\n      const formattedDate = parseDate(record.date);\n      if (!recordsByMonth[formattedDate]) recordsByMonth[formattedDate] = {};\n      recordsByMonth[formattedDate][activity] = record.status;\n    });\n  });\n  return recordsByMonth;\n};\nconst mapStatusToValue = status => {\n  var _statusMap$normalized;\n  const normalized = (status || \"\").toLowerCase();\n  const statusMap = {\n    failed: 0.2,\n    regular: 0.5,\n    suck: 0.001,\n    accomplished: 1,\n    excellence: 1.2\n  };\n  return (_statusMap$normalized = statusMap[normalized]) !== null && _statusMap$normalized !== void 0 ? _statusMap$normalized : null;\n};\nconst ApexChart = () => {\n  _s();\n  const [charts, setCharts] = useState({});\n  const [selectedMonth, setSelectedMonth] = useState(\"01\");\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [selectedStatus, setSelectedStatus] = useState(null);\n  const fetchData = () => {\n    fetch(API_URL).then(response => response.json()).then(data => {\n      const transformedData = transformData(data);\n      const chartConfigs = {};\n      Object.entries(transformedData).forEach(([date, records]) => {\n        const month = date.split(\"-\")[1];\n        if (!chartConfigs[month]) chartConfigs[month] = {\n          records: {},\n          series: []\n        };\n        chartConfigs[month].records[date] = records;\n      });\n      Object.keys(chartConfigs).forEach(month => {\n        const records = chartConfigs[month].records;\n        const uniqueDates = Object.keys(records).sort((a, b) => new Date(a) - new Date(b));\n        const activities = [...new Set(Object.values(records).flatMap(Object.keys))];\n        chartConfigs[month].series = activities.map(activity => ({\n          name: activity,\n          data: uniqueDates.map(date => {\n            var _records$date;\n            const status = ((_records$date = records[date]) === null || _records$date === void 0 ? void 0 : _records$date[activity]) || \"\";\n            return {\n              x: date,\n              y: mapStatusToValue(status),\n              date,\n              status: status || \"no status\",\n              activity\n            };\n          })\n        }));\n      });\n      setCharts(chartConfigs);\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const handleCellClick = (event, chartContext, config) => {\n    var _charts$selectedMonth;\n    const {\n      dataPointIndex,\n      seriesIndex\n    } = config;\n    if (dataPointIndex === undefined || seriesIndex === undefined) return;\n    const selectedSeries = (_charts$selectedMonth = charts[selectedMonth]) === null || _charts$selectedMonth === void 0 ? void 0 : _charts$selectedMonth.series[seriesIndex];\n    if (!selectedSeries) return;\n    const clickedData = selectedSeries.data[dataPointIndex];\n    setSelectedCell({\n      ...clickedData,\n      date: clickedData.date\n    });\n  };\n  const handleStatusClick = status => {\n    setSelectedStatus(prevStatus => prevStatus === status ? null : status);\n  };\n  const filterSeriesByStatus = series => {\n    if (!selectedStatus) return series;\n    return series.map(s => ({\n      ...s,\n      data: s.data.map(d => ({\n        ...d,\n        y: d.status.toLowerCase() === selectedStatus.toLowerCase() ? d.y : null\n      }))\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        width: \"100%\",\n        justifyContent: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          width: \"100%\",\n          maxWidth: \"1400px\",\n          gap: \"2rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          variant: \"outlined\",\n          style: {\n            minWidth: 150\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Mes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: selectedMonth,\n            onChange: e => setSelectedMonth(e.target.value),\n            label: \"Mes\",\n            children: Array.from({\n              length: 12\n            }, (_, i) => {\n              const month = (i + 1).toString().padStart(2, \"0\");\n              return /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: month,\n                children: new Date(2024, i).toLocaleString(\"default\", {\n                  month: \"long\"\n                })\n              }, month, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"12px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => handleStatusClick(\"suck\"),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                display: \"inline-block\",\n                width: 10,\n                height: 10,\n                backgroundColor: \"#000000\",\n                marginRight: 5\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 61\n            }, this), \" Suck\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => handleStatusClick(\"failed\"),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                display: \"inline-block\",\n                width: 10,\n                height: 10,\n                backgroundColor: \"#FF0000\",\n                marginRight: 5\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 63\n            }, this), \" Failed\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => handleStatusClick(\"regular\"),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                display: \"inline-block\",\n                width: 10,\n                height: 10,\n                backgroundColor: \"#FFFF00\",\n                marginRight: 5\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 64\n            }, this), \" Regular\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => handleStatusClick(\"accomplished\"),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                display: \"inline-block\",\n                width: 10,\n                height: 10,\n                backgroundColor: \"#00A100\",\n                marginRight: 5\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 69\n            }, this), \" Accomplished\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => handleStatusClick(\"excellence\"),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                display: \"inline-block\",\n                width: 10,\n                height: 10,\n                backgroundColor: \"#0000FF\",\n                marginRight: 5\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 67\n            }, this), \" Excellence\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), charts[selectedMonth] && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        padding: \"1rem\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          maxWidth: \"1400px\",\n          height: \"80vh\"\n        },\n        children: /*#__PURE__*/_jsxDEV(ReactApexChart, {\n          options: {\n            chart: {\n              type: \"heatmap\",\n              events: {\n                dataPointSelection: handleCellClick\n              },\n              toolbar: {\n                show: false\n              }\n            },\n            plotOptions: {\n              heatmap: {\n                shadeIntensity: 0.5,\n                radius: 0,\n                colorScale: {\n                  ranges: [{\n                    from: 0.001,\n                    to: 0.001,\n                    name: \"Suck\",\n                    color: \"#000000\"\n                  }, {\n                    from: 0.2,\n                    to: 0.2,\n                    name: \"Failed\",\n                    color: \"#FF0000\"\n                  }, {\n                    from: 0.5,\n                    to: 0.5,\n                    name: \"Regular\",\n                    color: \"#FFFF00\"\n                  }, {\n                    from: 1,\n                    to: 1,\n                    name: \"Accomplished\",\n                    color: \"#00A100\"\n                  }, {\n                    from: 1.2,\n                    to: 1.2,\n                    name: \"Excellence\",\n                    color: \"#0000FF\"\n                  }, {\n                    from: null,\n                    to: null,\n                    name: \"No Status\",\n                    color: \"#FFFFFF\"\n                  }]\n                }\n              }\n            },\n            legend: {\n              show: false\n            },\n            dataLabels: {\n              enabled: false\n            },\n            xaxis: {\n              type: \"category\",\n              labels: {\n                formatter: val => val.split(\"-\")[2],\n                style: {\n                  fontSize: \"17px\",\n                  fontFamily: \"Arial\",\n                  fontWeight: 400\n                }\n              }\n            },\n            yaxis: {\n              title: {\n                text: \"\"\n              },\n              labels: {\n                style: {\n                  fontSize: \"19px\",\n                  fontFamily: \"Arial\",\n                  fontWeight: 400\n                }\n              }\n            }\n          },\n          series: filterSeriesByStatus(charts[selectedMonth].series),\n          type: \"heatmap\",\n          height: \"50%\",\n          width: \"70%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(StatusModal, {\n      selectedCell: selectedCell,\n      setSelectedCell: setSelectedCell,\n      refreshData: fetchData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(ApexChart, \"rPk7YveT+/rihZSULmc1KWRLs+s=\");\n_c = ApexChart;\nexport default ApexChart;\nvar _c;\n$RefreshReg$(_c, \"ApexChart\");","map":{"version":3,"names":["React","useEffect","useState","ReactApexChart","StatusModal","FormControl","InputLabel","MenuItem","Select","jsxDEV","_jsxDEV","API_URL","parseDate","dateStr","day","month","year","split","map","Number","toString","padStart","transformData","data","recordsByMonth","Object","entries","activities","forEach","activity","records","record","formattedDate","date","status","mapStatusToValue","_statusMap$normalized","normalized","toLowerCase","statusMap","failed","regular","suck","accomplished","excellence","ApexChart","_s","charts","setCharts","selectedMonth","setSelectedMonth","selectedCell","setSelectedCell","selectedStatus","setSelectedStatus","fetchData","fetch","then","response","json","transformedData","chartConfigs","series","keys","uniqueDates","sort","a","b","Date","Set","values","flatMap","name","_records$date","x","y","catch","error","console","handleCellClick","event","chartContext","config","_charts$selectedMonth","dataPointIndex","seriesIndex","undefined","selectedSeries","clickedData","handleStatusClick","prevStatus","filterSeriesByStatus","s","d","style","display","flexDirection","alignItems","width","children","fileName","_jsxFileName","lineNumber","columnNumber","justifyContent","maxWidth","gap","variant","minWidth","value","onChange","e","target","label","Array","from","length","_","i","toLocaleString","onClick","height","backgroundColor","marginRight","padding","options","chart","type","events","dataPointSelection","toolbar","show","plotOptions","heatmap","shadeIntensity","radius","colorScale","ranges","to","color","legend","dataLabels","enabled","xaxis","labels","formatter","val","fontSize","fontFamily","fontWeight","yaxis","title","text","refreshData","_c","$RefreshReg$"],"sources":["/Users/guillermovarelli/Documents/workspace/act-front/src/ApexChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport StatusModal from \"./form/StatusModal\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n\nconst API_URL = \"http://localhost:8080/activities/grouped\";\n\nconst parseDate = (dateStr) => {\n  const [day, month, year] = dateStr.split(\"-\").map(Number);\n  return `${year}-${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n};\n\nconst transformData = (data) => {\n  const recordsByMonth = {};\n  Object.entries(data.activities).forEach(([activity, records]) => {\n    records.forEach((record) => {\n      const formattedDate = parseDate(record.date);\n      if (!recordsByMonth[formattedDate]) recordsByMonth[formattedDate] = {};\n      recordsByMonth[formattedDate][activity] = record.status;\n    });\n  });\n  return recordsByMonth;\n};\n\nconst mapStatusToValue = (status) => {\n  const normalized = (status || \"\").toLowerCase();\n  const statusMap = {\n    failed: 0.2,\n    regular: 0.5,\n    suck: 0.001,\n    accomplished: 1,\n    excellence: 1.2,\n  };\n  return statusMap[normalized] ?? null;\n};\n\nconst ApexChart = () => {\n  const [charts, setCharts] = useState({});\n  const [selectedMonth, setSelectedMonth] = useState(\"01\");\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [selectedStatus, setSelectedStatus] = useState(null);\n\n  const fetchData = () => {\n    fetch(API_URL)\n      .then((response) => response.json())\n      .then((data) => {\n        const transformedData = transformData(data);\n        const chartConfigs = {};\n\n        Object.entries(transformedData).forEach(([date, records]) => {\n          const month = date.split(\"-\")[1];\n          if (!chartConfigs[month]) chartConfigs[month] = { records: {}, series: [] };\n          chartConfigs[month].records[date] = records;\n        });\n\n        Object.keys(chartConfigs).forEach((month) => {\n          const records = chartConfigs[month].records;\n          const uniqueDates = Object.keys(records).sort((a, b) => new Date(a) - new Date(b));\n          const activities = [...new Set(Object.values(records).flatMap(Object.keys))];\n\n          chartConfigs[month].series = activities.map((activity) => ({\n            name: activity,\n            data: uniqueDates.map((date) => {\n              const status = records[date]?.[activity] || \"\";\n              return {\n                x: date,\n                y: mapStatusToValue(status),\n                date,\n                status: status || \"no status\",\n                activity,\n              };\n            }),\n          }));\n        });\n\n        setCharts(chartConfigs);\n      })\n      .catch((error) => console.error(\"Error fetching data:\", error));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const handleCellClick = (event, chartContext, config) => {\n    const { dataPointIndex, seriesIndex } = config;\n    if (dataPointIndex === undefined || seriesIndex === undefined) return;\n\n    const selectedSeries = charts[selectedMonth]?.series[seriesIndex];\n    if (!selectedSeries) return;\n\n    const clickedData = selectedSeries.data[dataPointIndex];\n\n    setSelectedCell({\n      ...clickedData,\n      date: clickedData.date,\n    });\n  };\n\n  const handleStatusClick = (status) => {\n    setSelectedStatus(prevStatus => (prevStatus === status ? null : status));\n  };\n\n  const filterSeriesByStatus = (series) => {\n    if (!selectedStatus) return series;\n    return series.map((s) => ({\n      ...s,\n      data: s.data.map((d) => ({\n        ...d,\n        y: d.status.toLowerCase() === selectedStatus.toLowerCase() ? d.y : null,\n      })),\n    }));\n  };\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", width: \"100%\" }}>\n      <br />\n      <br />\n      <div style={{ display: \"flex\", width: \"100%\", justifyContent: \"center\" }}>\n        <div style={{ display: \"flex\", justifyContent: \"center\", width: \"100%\", maxWidth: \"1400px\", gap: \"2rem\" }}>\n          <FormControl variant=\"outlined\" style={{ minWidth: 150 }}>\n            <InputLabel>Mes</InputLabel>\n            <Select value={selectedMonth} onChange={(e) => setSelectedMonth(e.target.value)} label=\"Mes\">\n              {Array.from({ length: 12 }, (_, i) => {\n                const month = (i + 1).toString().padStart(2, \"0\");\n                return (\n                  <MenuItem key={month} value={month}>\n                    {new Date(2024, i).toLocaleString(\"default\", { month: \"long\" })}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n\n          <div style={{ display: \"flex\", alignItems: \"center\", gap: \"12px\" }}>\n            <span onClick={() => handleStatusClick(\"suck\")}><span style={{ display: \"inline-block\", width: 10, height: 10, backgroundColor: \"#000000\", marginRight: 5 }}></span> Suck</span>\n            <span onClick={() => handleStatusClick(\"failed\")}><span style={{ display: \"inline-block\", width: 10, height: 10, backgroundColor: \"#FF0000\", marginRight: 5 }}></span> Failed</span>\n            <span onClick={() => handleStatusClick(\"regular\")}><span style={{ display: \"inline-block\", width: 10, height: 10, backgroundColor: \"#FFFF00\", marginRight: 5 }}></span> Regular</span>\n            <span onClick={() => handleStatusClick(\"accomplished\")}><span style={{ display: \"inline-block\", width: 10, height: 10, backgroundColor: \"#00A100\", marginRight: 5 }}></span> Accomplished</span>\n            <span onClick={() => handleStatusClick(\"excellence\")}><span style={{ display: \"inline-block\", width: 10, height: 10, backgroundColor: \"#0000FF\", marginRight: 5 }}></span> Excellence</span>\n          </div>\n        </div>\n      </div>\n\n      {charts[selectedMonth] && (\n        <div style={{ width: \"100%\", display: \"flex\", justifyContent: \"center\", padding: \"1rem\" }}>\n          <div style={{ width: \"100%\", maxWidth: \"1400px\", height: \"80vh\" }}>\n            <ReactApexChart\n              options={{\n                chart: {\n                  type: \"heatmap\",\n                  events: { dataPointSelection: handleCellClick },\n                  toolbar: { show: false },\n                },\n                plotOptions: {\n                  heatmap: {\n                    shadeIntensity: 0.5,\n                    radius: 0,\n                    colorScale: {\n                      ranges: [\n                        { from: 0.001, to: 0.001, name: \"Suck\", color: \"#000000\" },\n                        { from: 0.2, to: 0.2, name: \"Failed\", color: \"#FF0000\" },\n                        { from: 0.5, to: 0.5, name: \"Regular\", color: \"#FFFF00\" },\n                        { from: 1, to: 1, name: \"Accomplished\", color: \"#00A100\" },\n                        { from: 1.2, to: 1.2, name: \"Excellence\", color: \"#0000FF\" },\n                        { from: null, to: null, name: \"No Status\", color: \"#FFFFFF\" },\n                      ],\n                    },\n                  },\n                },\n                legend: { show: false },\n                dataLabels: { enabled: false },\n                xaxis: {\n                  type: \"category\",\n                  labels: {\n                    formatter: (val) => val.split(\"-\")[2],\n                    style: {\n                      fontSize: \"17px\",\n                      fontFamily: \"Arial\",\n                      fontWeight: 400,\n                    },\n                  },\n                },\n                yaxis: {\n                  title: { text: \"\" },\n                  labels: {\n                    style: {\n                      fontSize: \"19px\",\n                      fontFamily: \"Arial\",\n                      fontWeight: 400,\n                    },\n                  },\n                },\n              }}\n              series={filterSeriesByStatus(charts[selectedMonth].series)}\n              type=\"heatmap\"\n              height=\"50%\"\n              width=\"70%\"\n            />\n          </div>\n        </div>\n      )}\n\n      <StatusModal selectedCell={selectedCell} setSelectedCell={setSelectedCell} refreshData={fetchData} />\n    </div>\n  );\n};\n\nexport default ApexChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}