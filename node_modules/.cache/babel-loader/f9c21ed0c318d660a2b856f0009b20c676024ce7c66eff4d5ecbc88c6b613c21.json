{"ast":null,"code":"var _jsxFileName = \"/Users/guillermovarelli/Documents/workspace/act-front/src/ApexChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"https://activit.free.beeceptor.com/api/v3/activities\";\nconst parseDate = dateStr => {\n  const [day, month, year] = dateStr.split(\"-\").map(Number);\n  return {\n    year,\n    month,\n    day,\n    formatted: `${year}-${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`\n  };\n};\nconst transformData = data => {\n  const activityNames = Object.keys(data.activities);\n  const recordsByMonth = {};\n  activityNames.forEach(activity => {\n    data.activities[activity].forEach(record => {\n      const {\n        year,\n        month,\n        day,\n        formatted\n      } = parseDate(record.date);\n      const key = `${year}-${month.toString().padStart(2, \"0\")}`;\n      if (!recordsByMonth[key]) recordsByMonth[key] = {};\n      if (!recordsByMonth[key][formatted]) recordsByMonth[key][formatted] = {};\n      recordsByMonth[key][formatted][activity] = record.status;\n    });\n  });\n  return recordsByMonth;\n};\nconst mapStatusToValue = status => {\n  switch (status) {\n    case \"accomplished\":\n      return 1;\n    case \"failed\":\n      return 0;\n    case \"regular\":\n      return 0.5;\n    default:\n      return null;\n  }\n};\nconst generateChartData = records => {\n  const uniqueDates = Object.keys(records).sort();\n  const activityNames = [...new Set(Object.values(records).flatMap(Object.keys))];\n  return activityNames.map(activity => ({\n    name: activity,\n    data: uniqueDates.map(date => ({\n      x: date,\n      y: mapStatusToValue(records[date][activity])\n    }))\n  }));\n};\nconst ApexChart = () => {\n  _s();\n  const [charts, setCharts] = useState({});\n  useEffect(() => {\n    fetch(API_URL).then(response => response.json()).then(data => {\n      const transformedData = transformData(data);\n      const chartConfigs = {};\n      Object.entries(transformedData).forEach(([month, records]) => {\n        chartConfigs[month] = {\n          series: generateChartData(records),\n          options: {\n            chart: {\n              height: 600,\n              type: \"heatmap\"\n            },\n            plotOptions: {\n              heatmap: {\n                shadeIntensity: 0.5,\n                radius: 0,\n                useFillColorAsStroke: true,\n                colorScale: {\n                  ranges: [{\n                    from: 0,\n                    to: 0,\n                    name: \"Failed\",\n                    color: \"#FF0000\"\n                  }, {\n                    from: 1,\n                    to: 1,\n                    name: \"Accomplished\",\n                    color: \"#00A100\"\n                  }, {\n                    from: 0.5,\n                    to: 0.5,\n                    name: \"Regular\",\n                    color: \"#FFFF00\"\n                  }]\n                }\n              }\n            },\n            dataLabels: {\n              enabled: false\n            },\n            title: {\n              text: `Activity Heatmap - ${month}`\n            },\n            xaxis: {\n              type: \"category\",\n              title: {\n                text: \"Dates\"\n              }\n            },\n            yaxis: {\n              title: {\n                text: \"Activities\"\n              }\n            }\n          }\n        };\n      });\n      setCharts(chartConfigs);\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Activity Heatmap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), Object.entries(charts).map(([month, config]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: month\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ReactApexChart, {\n        options: config.options,\n        series: config.series,\n        type: \"heatmap\",\n        height: 600\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, month, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(ApexChart, \"OeHA5a+i/p2IU/8hxvddlcEbb2Y=\");\n_c = ApexChart;\nexport default ApexChart;\nvar _c;\n$RefreshReg$(_c, \"ApexChart\");","map":{"version":3,"names":["React","useEffect","useState","ReactApexChart","jsxDEV","_jsxDEV","API_URL","parseDate","dateStr","day","month","year","split","map","Number","formatted","toString","padStart","transformData","data","activityNames","Object","keys","activities","recordsByMonth","forEach","activity","record","date","key","status","mapStatusToValue","generateChartData","records","uniqueDates","sort","Set","values","flatMap","name","x","y","ApexChart","_s","charts","setCharts","fetch","then","response","json","transformedData","chartConfigs","entries","series","options","chart","height","type","plotOptions","heatmap","shadeIntensity","radius","useFillColorAsStroke","colorScale","ranges","from","to","color","dataLabels","enabled","title","text","xaxis","yaxis","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","config","_c","$RefreshReg$"],"sources":["/Users/guillermovarelli/Documents/workspace/act-front/src/ApexChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\n\nconst API_URL = \"https://activit.free.beeceptor.com/api/v3/activities\";\n\nconst parseDate = (dateStr) => {\n  const [day, month, year] = dateStr.split(\"-\").map(Number);\n  return { year, month, day, formatted: `${year}-${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}` };\n};\n\nconst transformData = (data) => {\n  const activityNames = Object.keys(data.activities);\n  const recordsByMonth = {};\n\n  activityNames.forEach((activity) => {\n    data.activities[activity].forEach((record) => {\n      const { year, month, day, formatted } = parseDate(record.date);\n      const key = `${year}-${month.toString().padStart(2, \"0\")}`;\n      \n      if (!recordsByMonth[key]) recordsByMonth[key] = {};\n      if (!recordsByMonth[key][formatted]) recordsByMonth[key][formatted] = {};\n      recordsByMonth[key][formatted][activity] = record.status;\n    });\n  });\n\n  return recordsByMonth;\n};\n\nconst mapStatusToValue = (status) => {\n  switch (status) {\n    case \"accomplished\": return 1;\n    case \"failed\": return 0;\n    case \"regular\": return 0.5;\n    default: return null;\n  }\n};\n\nconst generateChartData = (records) => {\n  const uniqueDates = Object.keys(records).sort();\n  const activityNames = [...new Set(Object.values(records).flatMap(Object.keys))];\n\n  return activityNames.map((activity) => ({\n    name: activity,\n    data: uniqueDates.map((date) => ({ x: date, y: mapStatusToValue(records[date][activity]) }))\n  }));\n};\n\nconst ApexChart = () => {\n  const [charts, setCharts] = useState({});\n\n  useEffect(() => {\n    fetch(API_URL)\n      .then((response) => response.json())\n      .then((data) => {\n        const transformedData = transformData(data);\n        const chartConfigs = {};\n\n        Object.entries(transformedData).forEach(([month, records]) => {\n          chartConfigs[month] = {\n            series: generateChartData(records),\n            options: {\n              chart: { height: 600, type: \"heatmap\" },\n              plotOptions: {\n                heatmap: {\n                  shadeIntensity: 0.5,\n                  radius: 0,\n                  useFillColorAsStroke: true,\n                  colorScale: {\n                    ranges: [\n                      { from: 0, to: 0, name: \"Failed\", color: \"#FF0000\" },\n                      { from: 1, to: 1, name: \"Accomplished\", color: \"#00A100\" },\n                      { from: 0.5, to: 0.5, name: \"Regular\", color: \"#FFFF00\" },\n                    ],\n                  },\n                },\n              },\n              dataLabels: { enabled: false },\n              title: { text: `Activity Heatmap - ${month}` },\n              xaxis: { type: \"category\", title: { text: \"Dates\" } },\n              yaxis: { title: { text: \"Activities\" } },\n            },\n          };\n        });\n\n        setCharts(chartConfigs);\n      })\n      .catch((error) => console.error(\"Error fetching data:\", error));\n  }, []);\n\n  return (\n    <div>\n      <h2>Activity Heatmap</h2>\n      {Object.entries(charts).map(([month, config]) => (\n        <div key={month}>\n          <h3>{month}</h3>\n          <ReactApexChart options={config.options} series={config.series} type=\"heatmap\" height={600} />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ApexChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}