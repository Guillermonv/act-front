{"ast":null,"code":"var _jsxFileName = \"/Users/guillermovarelli/Documents/workspace/act-front/src/ApexChartMobile.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8080/activities/grouped\";\nconst parseDate = dateStr => {\n  const [day, month, year] = dateStr.split(\"-\").map(Number);\n  return `${year}-${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n};\nconst transformData = data => {\n  const activityNames = Object.keys(data.activities);\n  const uniqueDates = [...new Set(Object.values(data.activities).flatMap(records => records.map(({\n    date\n  }) => parseDate(date))))].sort();\n  return {\n    series: uniqueDates.map(date => ({\n      name: date,\n      data: activityNames.map(activity => {\n        var _data$activities$acti;\n        const record = (_data$activities$acti = data.activities[activity]) === null || _data$activities$acti === void 0 ? void 0 : _data$activities$acti.find(r => parseDate(r.date) === date);\n        let yValue = null;\n        if (record) {\n          if (record.status.toLowerCase() === \"suck\") yValue = 0.001;else if (record.status.toLowerCase() === \"failed\") yValue = 0.2;else if (record.status.toLowerCase() === \"regular\") yValue = 0.5;else if (record.status.toLowerCase() === \"accomplished\") yValue = 1;else if (record.status.toLowerCase() === \"excellence\") yValue = 1.2;\n        }\n        return {\n          x: activity,\n          y: yValue\n        };\n      })\n    })),\n    categories: activityNames\n  };\n};\nconst ApexChartMobile = () => {\n  _s();\n  const [chartData, setChartData] = useState({\n    series: [],\n    options: {}\n  });\n  useEffect(() => {\n    fetch(API_URL).then(response => response.json()).then(data => {\n      const {\n        series,\n        categories\n      } = transformData(data);\n      setChartData({\n        series,\n        options: {\n          chart: {\n            type: \"heatmap\",\n            toolbar: {\n              show: false\n            }\n          },\n          plotOptions: {\n            heatmap: {\n              shadeIntensity: 0,\n              radius: 0,\n              useFillColorAsStroke: false,\n              colorScale: {\n                ranges: [{\n                  from: 0.001,\n                  to: 0.001,\n                  name: \"Suck\",\n                  color: \"#000000\"\n                }, {\n                  from: 0.2,\n                  to: 0.2,\n                  name: \"Failed\",\n                  color: \"#FF0000\"\n                }, {\n                  from: 0.5,\n                  to: 0.5,\n                  name: \"Regular\",\n                  color: \"#FFFF00\"\n                }, {\n                  from: 1,\n                  to: 1,\n                  name: \"Accomplished\",\n                  color: \"#00A100\"\n                }, {\n                  from: 1.2,\n                  to: 1.2,\n                  name: \"Excellence\",\n                  color: \"#0000FF\"\n                }, {\n                  from: null,\n                  to: null,\n                  name: \"No Status\",\n                  color: \"#FFFFFF\"\n                }]\n              }\n            }\n          },\n          dataLabels: {\n            enabled: false\n          },\n          xaxis: {\n            categories: categories,\n            position: \"top\",\n            // Actividades arriba\n            labels: {\n              rotate: -45,\n              // Etiquetas inclinadas\n              style: {\n                fontSize: \"12px\",\n                fontWeight: 600,\n                fontFamily: \"Roboto, sans-serif\"\n              }\n            }\n          },\n          yaxis: {\n            opposite: false,\n            labels: {\n              style: {\n                fontSize: \"12px\",\n                fontWeight: 600,\n                fontFamily: \"Roboto, sans-serif\"\n              }\n            }\n          },\n          grid: {\n            padding: {\n              left: 50,\n              // ⬅️ mueve todo el gráfico a la derecha\n              right: 20,\n              top: 20,\n              bottom: 20\n            }\n          },\n          title: {\n            align: \"center\",\n            style: {\n              fontSize: \"18px\",\n              fontWeight: \"bold\",\n              fontFamily: \"Montserrat, sans-serif\"\n            }\n          }\n        }\n      });\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      padding: \"1rem\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: \"95vw\",\n        backgroundColor: \"white\",\n        padding: \"1rem\",\n        borderRadius: \"12px\",\n        boxShadow: \"0 4px 10px rgba(0,0,0,0.1)\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactApexChart, {\n        options: chartData.options,\n        series: chartData.series,\n        type: \"heatmap\",\n        height: 4000,\n        width: 400\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(ApexChartMobile, \"8upgyZxrcARtwMbQC3404UkohD4=\");\n_c = ApexChartMobile;\nexport default ApexChartMobile;\nvar _c;\n$RefreshReg$(_c, \"ApexChartMobile\");","map":{"version":3,"names":["React","useEffect","useState","ReactApexChart","jsxDEV","_jsxDEV","API_URL","parseDate","dateStr","day","month","year","split","map","Number","toString","padStart","transformData","data","activityNames","Object","keys","activities","uniqueDates","Set","values","flatMap","records","date","sort","series","name","activity","_data$activities$acti","record","find","r","yValue","status","toLowerCase","x","y","categories","ApexChartMobile","_s","chartData","setChartData","options","fetch","then","response","json","chart","type","toolbar","show","plotOptions","heatmap","shadeIntensity","radius","useFillColorAsStroke","colorScale","ranges","from","to","color","dataLabels","enabled","xaxis","position","labels","rotate","style","fontSize","fontWeight","fontFamily","yaxis","opposite","grid","padding","left","right","top","bottom","title","align","catch","error","console","display","justifyContent","children","maxWidth","backgroundColor","borderRadius","boxShadow","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/guillermovarelli/Documents/workspace/act-front/src/ApexChartMobile.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\n\nconst API_URL = \"http://localhost:8080/activities/grouped\";\n\nconst parseDate = (dateStr) => {\n  const [day, month, year] = dateStr.split(\"-\").map(Number);\n  return `${year}-${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n};\n\nconst transformData = (data) => {\n  const activityNames = Object.keys(data.activities);\n  const uniqueDates = [...new Set(\n    Object.values(data.activities).flatMap((records) =>\n      records.map(({ date }) => parseDate(date))\n    )\n  )].sort();\n\n  return {\n    series: uniqueDates.map((date) => ({\n      name: date,\n      data: activityNames.map((activity) => {\n        const record = data.activities[activity]?.find((r) => parseDate(r.date) === date);\n        let yValue = null;\n        if (record) {\n          if (record.status.toLowerCase() === \"suck\") yValue = 0.001;\n          else if (record.status.toLowerCase() === \"failed\") yValue = 0.2;\n          else if (record.status.toLowerCase() === \"regular\") yValue = 0.5;\n          else if (record.status.toLowerCase() === \"accomplished\") yValue = 1;\n          else if (record.status.toLowerCase() === \"excellence\") yValue = 1.2;\n        }\n        return { x: activity, y: yValue };\n      }),\n    })),\n    categories: activityNames,\n  };\n};\n\nconst ApexChartMobile = () => {\n  const [chartData, setChartData] = useState({ series: [], options: {} });\n\n  useEffect(() => {\n    fetch(API_URL)\n      .then((response) => response.json())\n      .then((data) => {\n        const { series, categories } = transformData(data);\n\n        setChartData({\n          series,\n          options: {\n            chart: {\n              type: \"heatmap\",\n              toolbar: { show: false },\n            },\n            plotOptions: {\n              heatmap: {\n                shadeIntensity: 0,\n                radius: 0,\n                useFillColorAsStroke: false,\n                colorScale: {\n                  ranges: [\n                    { from: 0.001, to: 0.001, name: \"Suck\", color: \"#000000\" },\n                    { from: 0.2, to: 0.2, name: \"Failed\", color: \"#FF0000\" },\n                    { from: 0.5, to: 0.5, name: \"Regular\", color: \"#FFFF00\" },\n                    { from: 1, to: 1, name: \"Accomplished\", color: \"#00A100\" },\n                    { from: 1.2, to: 1.2, name: \"Excellence\", color: \"#0000FF\" },\n                    { from: null, to: null, name: \"No Status\", color: \"#FFFFFF\" },\n                  ],\n                },\n              },\n            },\n            dataLabels: { enabled: false },\n            xaxis: {\n              categories: categories,\n              position: \"top\", // Actividades arriba\n              labels: {\n                rotate: -45, // Etiquetas inclinadas\n                style: {\n                  fontSize: \"12px\",\n                  fontWeight: 600,\n                  fontFamily: \"Roboto, sans-serif\",\n                },\n              },\n            },\n            yaxis: {\n              opposite: false,\n              labels: {\n                style: {\n                  fontSize: \"12px\",\n                  fontWeight: 600,\n                  fontFamily: \"Roboto, sans-serif\",\n                },\n              },\n            },\n            grid: {\n              padding: {\n                left: 50, // ⬅️ mueve todo el gráfico a la derecha\n                right: 20,\n                top: 20,\n                bottom: 20,\n              },\n            },\n            title: {\n              align: \"center\",\n              style: {\n                fontSize: \"18px\",\n                fontWeight: \"bold\",\n                fontFamily: \"Montserrat, sans-serif\",\n              },\n            },\n          },\n        });\n      })\n      .catch((error) => console.error(\"Error fetching data:\", error));\n  }, []);\n\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"center\", padding: \"1rem\" }}>\n      <div style={{ maxWidth: \"95vw\", backgroundColor: \"white\", padding: \"1rem\", borderRadius: \"12px\", boxShadow: \"0 4px 10px rgba(0,0,0,0.1)\" }}>\n        <ReactApexChart\n          options={chartData.options}\n          series={chartData.series}\n          type=\"heatmap\"\n          height={4000}\n          width={400}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ApexChartMobile;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}