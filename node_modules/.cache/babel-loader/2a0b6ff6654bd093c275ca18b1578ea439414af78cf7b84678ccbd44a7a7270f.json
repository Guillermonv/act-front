{"ast":null,"code":"var _jsxFileName = \"/Users/guillermovarelli/Documents/workspace/v2/act-front/src/web/ApexChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport StatusModal from \"../form/StatusModal\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\nimport \"@fontsource/roboto\";\nimport \"@fontsource/montserrat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://44.204.238.86:80/activities/grouped\";\nconst parseDate = dateStr => {\n  const [day, month, year] = dateStr.split(\"-\").map(Number);\n  return `${year}-${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n};\nconst transformData = data => {\n  const recordsByMonth = {};\n  Object.entries(data.activities).forEach(([activity, records]) => {\n    records.forEach(record => {\n      const formattedDate = parseDate(record.date);\n      if (!recordsByMonth[formattedDate]) recordsByMonth[formattedDate] = {};\n      recordsByMonth[formattedDate][activity] = record.status;\n    });\n  });\n  return recordsByMonth;\n};\nconst mapStatusToValue = status => {\n  var _statusMap$normalized;\n  const normalized = (status || \"\").toLowerCase();\n  const statusMap = {\n    failed: 0.2,\n    regular: 0.5,\n    suck: 0.001,\n    accomplished: 1,\n    excellence: 1.2\n  };\n  return (_statusMap$normalized = statusMap[normalized]) !== null && _statusMap$normalized !== void 0 ? _statusMap$normalized : null;\n};\nconst ApexChart = () => {\n  _s();\n  var _charts$selectedMonth2, _charts$selectedMonth3;\n  const [charts, setCharts] = useState({});\n  const [selectedMonth, setSelectedMonth] = useState(\"01\");\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [selectedStatus, setSelectedStatus] = useState(null);\n  const [selectedActivity, setSelectedActivity] = useState(\"all\");\n  const fetchData = () => {\n    fetch(API_URL).then(response => response.json()).then(data => {\n      const transformedData = transformData(data);\n      const chartConfigs = {};\n      Object.entries(transformedData).forEach(([date, records]) => {\n        const month = date.split(\"-\")[1];\n        if (!chartConfigs[month]) chartConfigs[month] = {\n          records: {},\n          series: []\n        };\n        chartConfigs[month].records[date] = records;\n      });\n      Object.keys(chartConfigs).forEach(month => {\n        const records = chartConfigs[month].records;\n        const uniqueDates = Object.keys(records).sort((a, b) => new Date(a) - new Date(b));\n        const activities = [...new Set(Object.values(records).flatMap(Object.keys))];\n        chartConfigs[month].series = activities.map(activity => ({\n          name: activity,\n          data: uniqueDates.map(date => {\n            var _records$date;\n            const status = ((_records$date = records[date]) === null || _records$date === void 0 ? void 0 : _records$date[activity]) || \"\";\n            return {\n              x: date,\n              y: mapStatusToValue(status),\n              date,\n              status: status || \"no status\",\n              activity\n            };\n          })\n        }));\n      });\n      setCharts(chartConfigs);\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const handleCellClick = (event, chartContext, config) => {\n    var _charts$selectedMonth;\n    const {\n      dataPointIndex,\n      seriesIndex\n    } = config;\n    if (dataPointIndex === undefined || seriesIndex === undefined) return;\n    const selectedSeries = (_charts$selectedMonth = charts[selectedMonth]) === null || _charts$selectedMonth === void 0 ? void 0 : _charts$selectedMonth.series[seriesIndex];\n    if (!selectedSeries) return;\n    const clickedData = selectedSeries.data[dataPointIndex];\n    setSelectedCell({\n      ...clickedData,\n      date: clickedData.date\n    });\n  };\n  const handleStatusClick = status => {\n    setSelectedStatus(prev => prev === status ? null : status);\n  };\n  const filterSeriesByStatus = series => {\n    let filtered = series;\n    if (selectedActivity !== \"all\") {\n      filtered = filtered.filter(s => s.name === selectedActivity);\n    }\n    if (!selectedStatus) return filtered;\n    return filtered.map(s => ({\n      ...s,\n      data: s.data.map(d => ({\n        ...d,\n        y: d.status.toLowerCase() === selectedStatus.toLowerCase() ? d.y : null\n      }))\n    }));\n  };\n  const allActivities = (_charts$selectedMonth2 = (_charts$selectedMonth3 = charts[selectedMonth]) === null || _charts$selectedMonth3 === void 0 ? void 0 : _charts$selectedMonth3.series.map(s => s.name)) !== null && _charts$selectedMonth2 !== void 0 ? _charts$selectedMonth2 : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      marginTop: \"1.5rem\",\n      fontFamily: \"Roboto, sans-serif\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"55%\",\n        padding: \"1rem\",\n        backgroundColor: \"white\",\n        borderRadius: \"1rem\",\n        boxShadow: \"0 4px 10px rgba(0,0,0,0.1)\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          width: \"100%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          variant: \"outlined\",\n          style: {\n            minWidth: 150,\n            marginRight: 20\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Mes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: selectedMonth,\n            onChange: e => setSelectedMonth(e.target.value),\n            label: \"Mes\",\n            children: Array.from({\n              length: 12\n            }, (_, i) => {\n              const month = (i + 1).toString().padStart(2, \"0\");\n              return /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: month,\n                children: new Date(2024, i).toLocaleString(\"default\", {\n                  month: \"long\"\n                })\n              }, month, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          variant: \"outlined\",\n          style: {\n            minWidth: 180\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Mostrar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: selectedActivity,\n            onChange: e => setSelectedActivity(e.target.value),\n            label: \"Mostrar\",\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"all\",\n              children: \"Todas\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this), allActivities.map(a => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: a,\n              children: a\n            }, a, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            flexGrow: 1,\n            gap: \"12px\",\n            marginLeft: \"auto\",\n            marginRight: \"8%\"\n          },\n          children: [[\"suck\", \"#000000\"], [\"failed\", \"#FF0000\"], [\"regular\", \"#FFFF00\"], [\"accomplished\", \"#00A100\"], [\"excellence\", \"#0000FF\"]].map(([status, color]) => /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => handleStatusClick(status),\n            style: {\n              fontFamily: \"Montserrat, sans-serif\",\n              fontWeight: \"500\",\n              cursor: \"pointer\",\n              opacity: selectedStatus && selectedStatus !== status ? 0.4 : 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                display: \"inline-block\",\n                width: 10,\n                height: 10,\n                backgroundColor: color,\n                marginRight: 5\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this), status.charAt(0).toUpperCase() + status.slice(1)]\n          }, status, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), charts[selectedMonth] && /*#__PURE__*/_jsxDEV(ReactApexChart, {\n        options: {\n          chart: {\n            type: \"heatmap\",\n            events: {\n              dataPointSelection: handleCellClick\n            },\n            toolbar: {\n              show: true,\n              tools: {\n                download: false\n              }\n            }\n          },\n          plotOptions: {\n            heatmap: {\n              shadeIntensity: 0.5,\n              radius: 0,\n              colorScale: {\n                ranges: [{\n                  from: 0.001,\n                  to: 0.001,\n                  name: \"Suck\",\n                  color: \"#000000\"\n                }, {\n                  from: 0.2,\n                  to: 0.2,\n                  name: \"Failed\",\n                  color: \"#FF0000\"\n                }, {\n                  from: 0.5,\n                  to: 0.5,\n                  name: \"Regular\",\n                  color: \"#FFFF00\"\n                }, {\n                  from: 1,\n                  to: 1,\n                  name: \"Accomplished\",\n                  color: \"#00A100\"\n                }, {\n                  from: 1.2,\n                  to: 1.2,\n                  name: \"Excellence\",\n                  color: \"#0000FF\"\n                }, {\n                  from: null,\n                  to: null,\n                  name: \"No Status\",\n                  color: \"#FFFFFF\"\n                }]\n              }\n            }\n          },\n          legend: {\n            show: false\n          },\n          dataLabels: {\n            enabled: false\n          },\n          xaxis: {\n            type: \"category\",\n            labels: {\n              formatter: val => val.split(\"-\")[2],\n              style: {\n                fontSize: \"16px\",\n                fontFamily: \"Roboto, sans-serif\",\n                fontWeight: 400\n              }\n            }\n          },\n          yaxis: {\n            labels: {\n              style: {\n                fontSize: \"16px\",\n                fontFamily: \"Roboto, sans-serif\",\n                fontWeight: 400\n              }\n            }\n          }\n        },\n        series: filterSeriesByStatus(charts[selectedMonth].series),\n        type: \"heatmap\",\n        height: \"150%\",\n        width: \"100%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StatusModal, {\n        selectedCell: selectedCell,\n        setSelectedCell: setSelectedCell,\n        refreshData: fetchData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(ApexChart, \"EyPfRR733oTB+Pkda+Mcwm7Vv+w=\");\n_c = ApexChart;\nexport default ApexChart;\nvar _c;\n$RefreshReg$(_c, \"ApexChart\");","map":{"version":3,"names":["React","useEffect","useState","ReactApexChart","StatusModal","FormControl","InputLabel","MenuItem","Select","jsxDEV","_jsxDEV","API_URL","parseDate","dateStr","day","month","year","split","map","Number","toString","padStart","transformData","data","recordsByMonth","Object","entries","activities","forEach","activity","records","record","formattedDate","date","status","mapStatusToValue","_statusMap$normalized","normalized","toLowerCase","statusMap","failed","regular","suck","accomplished","excellence","ApexChart","_s","_charts$selectedMonth2","_charts$selectedMonth3","charts","setCharts","selectedMonth","setSelectedMonth","selectedCell","setSelectedCell","selectedStatus","setSelectedStatus","selectedActivity","setSelectedActivity","fetchData","fetch","then","response","json","transformedData","chartConfigs","series","keys","uniqueDates","sort","a","b","Date","Set","values","flatMap","name","_records$date","x","y","catch","error","console","handleCellClick","event","chartContext","config","_charts$selectedMonth","dataPointIndex","seriesIndex","undefined","selectedSeries","clickedData","handleStatusClick","prev","filterSeriesByStatus","filtered","filter","s","d","allActivities","style","display","justifyContent","marginTop","fontFamily","children","width","padding","backgroundColor","borderRadius","boxShadow","variant","minWidth","marginRight","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","label","Array","from","length","_","i","toLocaleString","alignItems","flexGrow","gap","marginLeft","color","onClick","fontWeight","cursor","opacity","height","charAt","toUpperCase","slice","options","chart","type","events","dataPointSelection","toolbar","show","tools","download","plotOptions","heatmap","shadeIntensity","radius","colorScale","ranges","to","legend","dataLabels","enabled","xaxis","labels","formatter","val","fontSize","yaxis","refreshData","_c","$RefreshReg$"],"sources":["/Users/guillermovarelli/Documents/workspace/v2/act-front/src/web/ApexChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport StatusModal from \"../form/StatusModal\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\nimport \"@fontsource/roboto\";\nimport \"@fontsource/montserrat\";\n\nconst API_URL = \"http://44.204.238.86:80/activities/grouped\";\n\nconst parseDate = (dateStr) => {\n  const [day, month, year] = dateStr.split(\"-\").map(Number);\n  return `${year}-${month.toString().padStart(2, \"0\")}-${day\n    .toString()\n    .padStart(2, \"0\")}`;\n};\n\nconst transformData = (data) => {\n  const recordsByMonth = {};\n  Object.entries(data.activities).forEach(([activity, records]) => {\n    records.forEach((record) => {\n      const formattedDate = parseDate(record.date);\n      if (!recordsByMonth[formattedDate]) recordsByMonth[formattedDate] = {};\n      recordsByMonth[formattedDate][activity] = record.status;\n    });\n  });\n  return recordsByMonth;\n};\n\nconst mapStatusToValue = (status) => {\n  const normalized = (status || \"\").toLowerCase();\n  const statusMap = {\n    failed: 0.2,\n    regular: 0.5,\n    suck: 0.001,\n    accomplished: 1,\n    excellence: 1.2,\n  };\n  return statusMap[normalized] ?? null;\n};\n\nconst ApexChart = () => {\n  const [charts, setCharts] = useState({});\n  const [selectedMonth, setSelectedMonth] = useState(\"01\");\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [selectedStatus, setSelectedStatus] = useState(null);\n  const [selectedActivity, setSelectedActivity] = useState(\"all\");\n\n  const fetchData = () => {\n    fetch(API_URL)\n      .then((response) => response.json())\n      .then((data) => {\n        const transformedData = transformData(data);\n        const chartConfigs = {};\n\n        Object.entries(transformedData).forEach(([date, records]) => {\n          const month = date.split(\"-\")[1];\n          if (!chartConfigs[month])\n            chartConfigs[month] = { records: {}, series: [] };\n          chartConfigs[month].records[date] = records;\n        });\n\n        Object.keys(chartConfigs).forEach((month) => {\n          const records = chartConfigs[month].records;\n          const uniqueDates = Object.keys(records).sort(\n            (a, b) => new Date(a) - new Date(b)\n          );\n          const activities = [\n            ...new Set(Object.values(records).flatMap(Object.keys)),\n          ];\n\n          chartConfigs[month].series = activities.map((activity) => ({\n            name: activity,\n            data: uniqueDates.map((date) => {\n              const status = records[date]?.[activity] || \"\";\n              return {\n                x: date,\n                y: mapStatusToValue(status),\n                date,\n                status: status || \"no status\",\n                activity,\n              };\n            }),\n          }));\n        });\n\n        setCharts(chartConfigs);\n      })\n      .catch((error) => console.error(\"Error fetching data:\", error));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const handleCellClick = (event, chartContext, config) => {\n    const { dataPointIndex, seriesIndex } = config;\n    if (dataPointIndex === undefined || seriesIndex === undefined) return;\n    const selectedSeries = charts[selectedMonth]?.series[seriesIndex];\n    if (!selectedSeries) return;\n    const clickedData = selectedSeries.data[dataPointIndex];\n    setSelectedCell({ ...clickedData, date: clickedData.date });\n  };\n\n  const handleStatusClick = (status) => {\n    setSelectedStatus((prev) => (prev === status ? null : status));\n  };\n\n  const filterSeriesByStatus = (series) => {\n    let filtered = series;\n    if (selectedActivity !== \"all\") {\n      filtered = filtered.filter((s) => s.name === selectedActivity);\n    }\n    if (!selectedStatus) return filtered;\n    return filtered.map((s) => ({\n      ...s,\n      data: s.data.map((d) => ({\n        ...d,\n        y: d.status.toLowerCase() === selectedStatus.toLowerCase() ? d.y : null,\n      })),\n    }));\n  };\n\n  const allActivities =\n    charts[selectedMonth]?.series.map((s) => s.name) ?? [];\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        marginTop: \"1.5rem\",\n        fontFamily: \"Roboto, sans-serif\",\n      }}\n    >\n      <div\n        style={{\n          width: \"55%\",\n          padding: \"1rem\",\n          backgroundColor: \"white\",\n          borderRadius: \"1rem\",\n          boxShadow: \"0 4px 10px rgba(0,0,0,0.1)\",\n        }}\n      >\n        <div style={{ display: \"flex\", width: \"100%\" }}>\n          {/* Mes Selector */}\n          <FormControl variant=\"outlined\" style={{ minWidth: 150, marginRight: 20 }}>\n            <InputLabel>Mes</InputLabel>\n            <Select\n              value={selectedMonth}\n              onChange={(e) => setSelectedMonth(e.target.value)}\n              label=\"Mes\"\n            >\n              {Array.from({ length: 12 }, (_, i) => {\n                const month = (i + 1).toString().padStart(2, \"0\");\n                return (\n                  <MenuItem key={month} value={month}>\n                    {new Date(2024, i).toLocaleString(\"default\", {\n                      month: \"long\",\n                    })}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n\n          {/* Dropdown para mostrar actividades */}\n          <FormControl variant=\"outlined\" style={{ minWidth: 180 }}>\n            <InputLabel>Mostrar</InputLabel>\n            <Select\n              value={selectedActivity}\n              onChange={(e) => setSelectedActivity(e.target.value)}\n              label=\"Mostrar\"\n            >\n              <MenuItem value=\"all\">Todas</MenuItem>\n              {allActivities.map((a) => (\n                <MenuItem key={a} value={a}>\n                  {a}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n\n          {/* Status legend */}\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              flexGrow: 1,\n              gap: \"12px\",\n              marginLeft: \"auto\",\n              marginRight: \"8%\",\n            }}\n          >\n            {[\n              [\"suck\", \"#000000\"],\n              [\"failed\", \"#FF0000\"],\n              [\"regular\", \"#FFFF00\"],\n              [\"accomplished\", \"#00A100\"],\n              [\"excellence\", \"#0000FF\"],\n            ].map(([status, color]) => (\n              <span\n                key={status}\n                onClick={() => handleStatusClick(status)}\n                style={{\n                  fontFamily: \"Montserrat, sans-serif\",\n                  fontWeight: \"500\",\n                  cursor: \"pointer\",\n                  opacity: selectedStatus && selectedStatus !== status ? 0.4 : 1,\n                }}\n              >\n                <span\n                  style={{\n                    display: \"inline-block\",\n                    width: 10,\n                    height: 10,\n                    backgroundColor: color,\n                    marginRight: 5,\n                  }}\n                ></span>\n                {status.charAt(0).toUpperCase() + status.slice(1)}\n              </span>\n            ))}\n          </div>\n        </div>\n\n        {/* Chart */}\n        {charts[selectedMonth] && (\n          <ReactApexChart\n            options={{\n              chart: {\n                type: \"heatmap\",\n                events: { dataPointSelection: handleCellClick },\n                toolbar: { show: true, tools: { download: false } },\n              },\n              plotOptions: {\n                heatmap: {\n                  shadeIntensity: 0.5,\n                  radius: 0,\n                  colorScale: {\n                    ranges: [\n                      { from: 0.001, to: 0.001, name: \"Suck\", color: \"#000000\" },\n                      { from: 0.2, to: 0.2, name: \"Failed\", color: \"#FF0000\" },\n                      { from: 0.5, to: 0.5, name: \"Regular\", color: \"#FFFF00\" },\n                      { from: 1, to: 1, name: \"Accomplished\", color: \"#00A100\" },\n                      { from: 1.2, to: 1.2, name: \"Excellence\", color: \"#0000FF\" },\n                      { from: null, to: null, name: \"No Status\", color: \"#FFFFFF\" },\n                    ],\n                  },\n                },\n              },\n              legend: { show: false },\n              dataLabels: { enabled: false },\n              xaxis: {\n                type: \"category\",\n                labels: {\n                  formatter: (val) => val.split(\"-\")[2],\n                  style: {\n                    fontSize: \"16px\",\n                    fontFamily: \"Roboto, sans-serif\",\n                    fontWeight: 400,\n                  },\n                },\n              },\n              yaxis: {\n                labels: {\n                  style: {\n                    fontSize: \"16px\",\n                    fontFamily: \"Roboto, sans-serif\",\n                    fontWeight: 400,\n                  },\n                },\n              },\n            }}\n            series={filterSeriesByStatus(charts[selectedMonth].series)}\n            type=\"heatmap\"\n            height=\"150%\"\n            width=\"100%\"\n          />\n        )}\n\n        <StatusModal\n          selectedCell={selectedCell}\n          setSelectedCell={setSelectedCell}\n          refreshData={fetchData}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ApexChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}