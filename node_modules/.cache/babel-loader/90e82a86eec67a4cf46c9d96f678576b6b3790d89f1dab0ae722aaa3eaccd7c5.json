{"ast":null,"code":"var _jsxFileName = \"/Users/guillermovarelli/Documents/workspace/act-front/src/ApexChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport StatusModal from \"./form/StatusModal\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HeatmapChart = () => {\n  _s();\n  const [series, setSeries] = useState([]);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const convertToUTCNoon = dateStr => {\n    const date = new Date(dateStr);\n    date.setUTCHours(12, 0, 0, 0); // Evita desfase horario\n    return date.getTime();\n  };\n  const fetchData = async () => {\n    try {\n      const res = await axios.get(\"http://localhost:8080/activities/grouped\");\n      const groupedData = res.data;\n      const transformed = groupedData.map(group => ({\n        name: group.activity,\n        data: group.dates.map(d => ({\n          x: convertToUTCNoon(d.date),\n          // timestamp para eje X\n          y: d.status,\n          activity: group.activity,\n          date: d.date // ISO original para el modal\n        }))\n      }));\n      setSeries(transformed);\n    } catch (err) {\n      console.error(\"Error fetching data:\", err);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const options = {\n    chart: {\n      height: 350,\n      type: \"heatmap\",\n      events: {\n        dataPointSelection: (event, chartContext, {\n          seriesIndex,\n          dataPointIndex\n        }) => {\n          const cell = series[seriesIndex].data[dataPointIndex];\n          setSelectedCell(cell);\n        }\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    xaxis: {\n      type: \"datetime\",\n      labels: {\n        datetimeUTC: false,\n        format: \"dd/MM\" // más claro para debug\n      }\n    },\n    plotOptions: {\n      heatmap: {\n        colorScale: {\n          ranges: [{\n            from: 0,\n            to: 0.2,\n            name: \"suck\",\n            color: \"#000000\"\n          }, {\n            from: 0.2,\n            to: 0.4,\n            name: \"failed\",\n            color: \"#FF0000\"\n          }, {\n            from: 0.4,\n            to: 0.6,\n            name: \"regular\",\n            color: \"#FFFF00\"\n          }, {\n            from: 0.6,\n            to: 0.8,\n            name: \"accomplished\",\n            color: \"#00A100\"\n          }, {\n            from: 0.8,\n            to: 1.0,\n            name: \"excellence\",\n            color: \"#0000FF\"\n          }]\n        }\n      }\n    },\n    title: {\n      text: \"Activity Heatmap\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Chart, {\n      options: options,\n      series: series,\n      type: \"heatmap\",\n      height: 450\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatusModal, {\n      selectedCell: selectedCell,\n      setSelectedCell: setSelectedCell,\n      refreshData: fetchData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(HeatmapChart, \"Bn/sgizFNpD3fGM/KeiOUMWkyJA=\");\n_c = HeatmapChart;\nexport default HeatmapChart;\nvar _c;\n$RefreshReg$(_c, \"HeatmapChart\");","map":{"version":3,"names":["React","useEffect","useState","Chart","StatusModal","jsxDEV","_jsxDEV","Fragment","_Fragment","HeatmapChart","_s","series","setSeries","selectedCell","setSelectedCell","convertToUTCNoon","dateStr","date","Date","setUTCHours","getTime","fetchData","res","axios","get","groupedData","data","transformed","map","group","name","activity","dates","d","x","y","status","err","console","error","options","chart","height","type","events","dataPointSelection","event","chartContext","seriesIndex","dataPointIndex","cell","dataLabels","enabled","xaxis","labels","datetimeUTC","format","plotOptions","heatmap","colorScale","ranges","from","to","color","title","text","children","fileName","_jsxFileName","lineNumber","columnNumber","refreshData","_c","$RefreshReg$"],"sources":["/Users/guillermovarelli/Documents/workspace/act-front/src/ApexChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\nimport StatusModal from \"./form/StatusModal\";\n\nconst HeatmapChart = () => {\n  const [series, setSeries] = useState([]);\n  const [selectedCell, setSelectedCell] = useState(null);\n\n  const convertToUTCNoon = (dateStr) => {\n    const date = new Date(dateStr);\n    date.setUTCHours(12, 0, 0, 0); // Evita desfase horario\n    return date.getTime();\n  };\n\n  const fetchData = async () => {\n    try {\n      const res = await axios.get(\"http://localhost:8080/activities/grouped\");\n      const groupedData = res.data;\n\n      const transformed = groupedData.map((group) => ({\n        name: group.activity,\n        data: group.dates.map((d) => ({\n          x: convertToUTCNoon(d.date), // timestamp para eje X\n          y: d.status,\n          activity: group.activity,\n          date: d.date, // ISO original para el modal\n        })),\n      }));\n\n      setSeries(transformed);\n    } catch (err) {\n      console.error(\"Error fetching data:\", err);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const options = {\n    chart: {\n      height: 350,\n      type: \"heatmap\",\n      events: {\n        dataPointSelection: (event, chartContext, { seriesIndex, dataPointIndex }) => {\n          const cell = series[seriesIndex].data[dataPointIndex];\n          setSelectedCell(cell);\n        },\n      },\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    xaxis: {\n      type: \"datetime\",\n      labels: {\n        datetimeUTC: false,\n        format: \"dd/MM\", // más claro para debug\n      },\n    },\n    plotOptions: {\n      heatmap: {\n        colorScale: {\n          ranges: [\n            { from: 0, to: 0.2, name: \"suck\", color: \"#000000\" },\n            { from: 0.2, to: 0.4, name: \"failed\", color: \"#FF0000\" },\n            { from: 0.4, to: 0.6, name: \"regular\", color: \"#FFFF00\" },\n            { from: 0.6, to: 0.8, name: \"accomplished\", color: \"#00A100\" },\n            { from: 0.8, to: 1.0, name: \"excellence\", color: \"#0000FF\" },\n          ],\n        },\n      },\n    },\n    title: {\n      text: \"Activity Heatmap\",\n    },\n  };\n\n  return (\n    <>\n      <Chart options={options} series={series} type=\"heatmap\" height={450} />\n      <StatusModal\n        selectedCell={selectedCell}\n        setSelectedCell={setSelectedCell}\n        refreshData={fetchData}\n      />\n    </>\n  );\n};\n\nexport default HeatmapChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,WAAW,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7C,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMa,gBAAgB,GAAIC,OAAO,IAAK;IACpC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,OAAO,CAAC;IAC9BC,IAAI,CAACE,WAAW,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC/B,OAAOF,IAAI,CAACG,OAAO,CAAC,CAAC;EACvB,CAAC;EAED,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAC,0CAA0C,CAAC;MACvE,MAAMC,WAAW,GAAGH,GAAG,CAACI,IAAI;MAE5B,MAAMC,WAAW,GAAGF,WAAW,CAACG,GAAG,CAAEC,KAAK,KAAM;QAC9CC,IAAI,EAAED,KAAK,CAACE,QAAQ;QACpBL,IAAI,EAAEG,KAAK,CAACG,KAAK,CAACJ,GAAG,CAAEK,CAAC,KAAM;UAC5BC,CAAC,EAAEnB,gBAAgB,CAACkB,CAAC,CAAChB,IAAI,CAAC;UAAE;UAC7BkB,CAAC,EAAEF,CAAC,CAACG,MAAM;UACXL,QAAQ,EAAEF,KAAK,CAACE,QAAQ;UACxBd,IAAI,EAAEgB,CAAC,CAAChB,IAAI,CAAE;QAChB,CAAC,CAAC;MACJ,CAAC,CAAC,CAAC;MAEHL,SAAS,CAACe,WAAW,CAAC;IACxB,CAAC,CAAC,OAAOU,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,GAAG,CAAC;IAC5C;EACF,CAAC;EAEDpC,SAAS,CAAC,MAAM;IACdoB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMmB,OAAO,GAAG;IACdC,KAAK,EAAE;MACLC,MAAM,EAAE,GAAG;MACXC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE;QACNC,kBAAkB,EAAEA,CAACC,KAAK,EAAEC,YAAY,EAAE;UAAEC,WAAW;UAAEC;QAAe,CAAC,KAAK;UAC5E,MAAMC,IAAI,GAAGvC,MAAM,CAACqC,WAAW,CAAC,CAACtB,IAAI,CAACuB,cAAc,CAAC;UACrDnC,eAAe,CAACoC,IAAI,CAAC;QACvB;MACF;IACF,CAAC;IACDC,UAAU,EAAE;MACVC,OAAO,EAAE;IACX,CAAC;IACDC,KAAK,EAAE;MACLV,IAAI,EAAE,UAAU;MAChBW,MAAM,EAAE;QACNC,WAAW,EAAE,KAAK;QAClBC,MAAM,EAAE,OAAO,CAAE;MACnB;IACF,CAAC;IACDC,WAAW,EAAE;MACXC,OAAO,EAAE;QACPC,UAAU,EAAE;UACVC,MAAM,EAAE,CACN;YAAEC,IAAI,EAAE,CAAC;YAAEC,EAAE,EAAE,GAAG;YAAEhC,IAAI,EAAE,MAAM;YAAEiC,KAAK,EAAE;UAAU,CAAC,EACpD;YAAEF,IAAI,EAAE,GAAG;YAAEC,EAAE,EAAE,GAAG;YAAEhC,IAAI,EAAE,QAAQ;YAAEiC,KAAK,EAAE;UAAU,CAAC,EACxD;YAAEF,IAAI,EAAE,GAAG;YAAEC,EAAE,EAAE,GAAG;YAAEhC,IAAI,EAAE,SAAS;YAAEiC,KAAK,EAAE;UAAU,CAAC,EACzD;YAAEF,IAAI,EAAE,GAAG;YAAEC,EAAE,EAAE,GAAG;YAAEhC,IAAI,EAAE,cAAc;YAAEiC,KAAK,EAAE;UAAU,CAAC,EAC9D;YAAEF,IAAI,EAAE,GAAG;YAAEC,EAAE,EAAE,GAAG;YAAEhC,IAAI,EAAE,YAAY;YAAEiC,KAAK,EAAE;UAAU,CAAC;QAEhE;MACF;IACF,CAAC;IACDC,KAAK,EAAE;MACLC,IAAI,EAAE;IACR;EACF,CAAC;EAED,oBACE3D,OAAA,CAAAE,SAAA;IAAA0D,QAAA,gBACE5D,OAAA,CAACH,KAAK;MAACqC,OAAO,EAAEA,OAAQ;MAAC7B,MAAM,EAAEA,MAAO;MAACgC,IAAI,EAAC,SAAS;MAACD,MAAM,EAAE;IAAI;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvEhE,OAAA,CAACF,WAAW;MACVS,YAAY,EAAEA,YAAa;MAC3BC,eAAe,EAAEA,eAAgB;MACjCyD,WAAW,EAAElD;IAAU;MAAA8C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC;EAAA,eACF,CAAC;AAEP,CAAC;AAAC5D,EAAA,CApFID,YAAY;AAAA+D,EAAA,GAAZ/D,YAAY;AAsFlB,eAAeA,YAAY;AAAC,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}