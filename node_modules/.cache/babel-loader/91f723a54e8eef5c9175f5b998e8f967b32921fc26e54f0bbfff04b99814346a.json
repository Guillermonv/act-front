{"ast":null,"code":"var _jsxFileName = \"/Users/guillermovarelli/Documents/workspace/act-front/src/ApexChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport StatusModal from \"./form/StatusModal\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8080/activities/grouped\";\n\n// Función para formatear la fecha\nconst parseDate = dateStr => {\n  const [day, month, year] = dateStr.split(\"-\").map(Number);\n  return `${year}-${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n};\nconst mapStatusToValue = status => {\n  var _statusMap$status$toL;\n  const statusMap = {\n    failed: 0.2,\n    fail: 0.2,\n    regular: 0.5,\n    accomplished: 1,\n    excellence: 1.2,\n    suck: 0.001\n  };\n  return (_statusMap$status$toL = statusMap[status === null || status === void 0 ? void 0 : status.toLowerCase()]) !== null && _statusMap$status$toL !== void 0 ? _statusMap$status$toL : null;\n};\nconst getAllDatesInMonth = (year, month) => {\n  const daysInMonth = new Date(year, month, 0).getDate();\n  const dates = [];\n  for (let day = 1; day <= daysInMonth; day++) {\n    const isoDate = new Date(year, month - 1, day).toISOString().split(\"T\")[0];\n    dates.push({\n      day,\n      isoDate\n    });\n  }\n  return dates;\n};\nconst ApexChart = () => {\n  _s();\n  const [charts, setCharts] = useState({});\n  const [selectedMonth, setSelectedMonth] = useState(\"01\");\n  const [selectedCell, setSelectedCell] = useState(null);\n  const fetchData = () => {\n    fetch(API_URL).then(response => response.json()).then(data => {\n      const currentYear = new Date().getFullYear();\n      const chartConfigs = {};\n      const recordsByDate = {};\n      Object.entries(data.activities).forEach(([activity, records]) => {\n        records.forEach(record => {\n          const formattedDate = parseDate(record.date);\n          if (!recordsByDate[formattedDate]) recordsByDate[formattedDate] = {};\n          recordsByDate[formattedDate][activity] = record.status;\n        });\n      });\n      for (let month = 1; month <= 12; month++) {\n        const monthStr = month.toString().padStart(2, \"0\");\n        const dateObjects = getAllDatesInMonth(currentYear, month);\n        const allDates = dateObjects.map(d => d.isoDate);\n        const categories = dateObjects.map(d => d.day.toString());\n        const activities = new Set();\n        allDates.forEach(date => {\n          const dailyRecords = recordsByDate[date];\n          if (dailyRecords) {\n            Object.keys(dailyRecords).forEach(a => activities.add(a));\n          }\n        });\n        const series = Array.from(activities).map(activity => ({\n          name: activity,\n          data: dateObjects.map(({\n            day,\n            isoDate\n          }) => {\n            var _recordsByDate$isoDat, _recordsByDate$isoDat2;\n            return {\n              x: day.toString(),\n              y: mapStatusToValue(((_recordsByDate$isoDat = recordsByDate[isoDate]) === null || _recordsByDate$isoDat === void 0 ? void 0 : _recordsByDate$isoDat[activity]) || \"\"),\n              status: ((_recordsByDate$isoDat2 = recordsByDate[isoDate]) === null || _recordsByDate$isoDat2 === void 0 ? void 0 : _recordsByDate$isoDat2[activity]) || \"\",\n              activity,\n              date: isoDate // Asegurarse de que 'date' es correcto\n            };\n          })\n        }));\n        chartConfigs[monthStr] = {\n          series,\n          categories\n        };\n      }\n      setCharts(chartConfigs);\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const handleCellClick = (event, chartContext, config) => {\n    var _charts$selectedMonth;\n    const {\n      dataPointIndex,\n      seriesIndex\n    } = config;\n    if (dataPointIndex === undefined || seriesIndex === undefined) return;\n    const selectedSeries = (_charts$selectedMonth = charts[selectedMonth]) === null || _charts$selectedMonth === void 0 ? void 0 : _charts$selectedMonth.series[seriesIndex];\n    if (!selectedSeries) return;\n    const clickedData = selectedSeries.data[dataPointIndex];\n\n    // Verificar que clickedData.date tiene el formato correcto (YYYY-MM-DD)\n    const dateParts = clickedData.date.split(\"-\"); // Dividir la fecha en partes: [YYYY, MM, DD]\n    const year = dateParts[0]; // Año\n    const month = dateParts[1].padStart(2, \"0\"); // Mes con 2 dígitos\n    const day = dateParts[2].padStart(2, \"0\"); // Día con 2 dígitos\n\n    // Formatear correctamente la fecha como \"DD-MM-YYYY\"\n    const formattedDate = `${day}-${month}-${year}`;\n    setSelectedCell({\n      ...clickedData,\n      formattedDate // Asignar la fecha formateada\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        width: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          marginLeft: \"22%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          variant: \"outlined\",\n          style: {\n            minWidth: 150\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Mes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: selectedMonth,\n            onChange: e => setSelectedMonth(e.target.value),\n            label: \"Mes\",\n            children: Array.from({\n              length: 12\n            }, (_, i) => {\n              const month = (i + 1).toString().padStart(2, \"0\");\n              return /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: month,\n                children: new Date(2024, i).toLocaleString(\"default\", {\n                  month: \"long\"\n                })\n              }, month, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          flexGrow: 1,\n          gap: \"12px\",\n          marginRight: \"22%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              display: \"inline-block\",\n              width: 10,\n              height: 10,\n              backgroundColor: \"#000000\",\n              marginRight: 5\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this), \" Sucky\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              display: \"inline-block\",\n              width: 10,\n              height: 10,\n              backgroundColor: \"#FF0000\",\n              marginRight: 5\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 17\n          }, this), \" Failed\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              display: \"inline-block\",\n              width: 10,\n              height: 10,\n              backgroundColor: \"#FFFF00\",\n              marginRight: 5\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 17\n          }, this), \" Regular\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              display: \"inline-block\",\n              width: 10,\n              height: 10,\n              backgroundColor: \"#00A100\",\n              marginRight: 5\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 17\n          }, this), \" Accomplished\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              display: \"inline-block\",\n              width: 10,\n              height: 10,\n              backgroundColor: \"#0000FF\",\n              marginRight: 5\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }, this), \" Excellence\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), charts[selectedMonth] && /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      options: {\n        chart: {\n          type: \"heatmap\",\n          events: {\n            dataPointSelection: handleCellClick\n          }\n        },\n        plotOptions: {\n          heatmap: {\n            shadeIntensity: 0.5,\n            radius: 0,\n            colorScale: {\n              ranges: [{\n                from: 0.001,\n                to: 0.001,\n                name: \"Suck\",\n                color: \"#000000\"\n              }, {\n                from: 0.2,\n                to: 0.2,\n                name: \"Failed\",\n                color: \"#FF0000\"\n              }, {\n                from: 0.5,\n                to: 0.5,\n                name: \"Regular\",\n                color: \"#FFFF00\"\n              }, {\n                from: 1,\n                to: 1,\n                name: \"Accomplished\",\n                color: \"#00A100\"\n              }, {\n                from: 1.2,\n                to: 1.2,\n                name: \"Excellence\",\n                color: \"#0000FF\"\n              }, {\n                from: null,\n                to: null,\n                name: \"No Status\",\n                color: \"#FFFFFF\"\n              }]\n            }\n          }\n        },\n        legend: {\n          show: false\n        },\n        dataLabels: {\n          enabled: false\n        },\n        xaxis: {\n          type: \"category\",\n          categories: charts[selectedMonth].categories,\n          labels: {\n            formatter: value => value,\n            style: {\n              fontSize: \"17px\",\n              fontFamily: \"Arial\",\n              fontWeight: 400\n            }\n          }\n        },\n        yaxis: {\n          title: {\n            text: \"\"\n          },\n          labels: {\n            style: {\n              fontSize: \"19px\",\n              fontFamily: \"Arial\",\n              fontWeight: 400\n            }\n          }\n        }\n      },\n      series: charts[selectedMonth].series,\n      type: \"heatmap\",\n      height: 400,\n      width: 1300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(StatusModal, {\n      selectedCell: selectedCell,\n      setSelectedCell: setSelectedCell,\n      refreshData: fetchData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(ApexChart, \"TuER9qH+AfkOZ4SVtV5SrML9n44=\");\n_c = ApexChart;\nexport default ApexChart;\nvar _c;\n$RefreshReg$(_c, \"ApexChart\");","map":{"version":3,"names":["React","useEffect","useState","ReactApexChart","StatusModal","FormControl","InputLabel","MenuItem","Select","jsxDEV","_jsxDEV","API_URL","parseDate","dateStr","day","month","year","split","map","Number","toString","padStart","mapStatusToValue","status","_statusMap$status$toL","statusMap","failed","fail","regular","accomplished","excellence","suck","toLowerCase","getAllDatesInMonth","daysInMonth","Date","getDate","dates","isoDate","toISOString","push","ApexChart","_s","charts","setCharts","selectedMonth","setSelectedMonth","selectedCell","setSelectedCell","fetchData","fetch","then","response","json","data","currentYear","getFullYear","chartConfigs","recordsByDate","Object","entries","activities","forEach","activity","records","record","formattedDate","date","monthStr","dateObjects","allDates","d","categories","Set","dailyRecords","keys","a","add","series","Array","from","name","_recordsByDate$isoDat","_recordsByDate$isoDat2","x","y","catch","error","console","handleCellClick","event","chartContext","config","_charts$selectedMonth","dataPointIndex","seriesIndex","undefined","selectedSeries","clickedData","dateParts","style","display","flexDirection","alignItems","width","children","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","variant","minWidth","value","onChange","e","target","label","length","_","i","toLocaleString","justifyContent","flexGrow","gap","marginRight","height","backgroundColor","options","chart","type","events","dataPointSelection","plotOptions","heatmap","shadeIntensity","radius","colorScale","ranges","to","color","legend","show","dataLabels","enabled","xaxis","labels","formatter","fontSize","fontFamily","fontWeight","yaxis","title","text","refreshData","_c","$RefreshReg$"],"sources":["/Users/guillermovarelli/Documents/workspace/act-front/src/ApexChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport StatusModal from \"./form/StatusModal\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\n\nconst API_URL = \"http://localhost:8080/activities/grouped\";\n\n// Función para formatear la fecha\nconst parseDate = (dateStr) => {\n  const [day, month, year] = dateStr.split(\"-\").map(Number);\n  return `${year}-${month.toString().padStart(2, \"0\")}-${day.toString().padStart(2, \"0\")}`;\n};\n\nconst mapStatusToValue = (status) => {\n  const statusMap = {\n    failed: 0.2,\n    fail: 0.2,\n    regular: 0.5,\n    accomplished: 1,\n    excellence: 1.2,\n    suck: 0.001,\n  };\n  return statusMap[status?.toLowerCase()] ?? null;\n};\n\nconst getAllDatesInMonth = (year, month) => {\n  const daysInMonth = new Date(year, month, 0).getDate();\n  const dates = [];\n  for (let day = 1; day <= daysInMonth; day++) {\n    const isoDate = new Date(year, month - 1, day).toISOString().split(\"T\")[0];\n    dates.push({ day, isoDate });\n  }\n  return dates;\n};\n\nconst ApexChart = () => {\n  const [charts, setCharts] = useState({});\n  const [selectedMonth, setSelectedMonth] = useState(\"01\");\n  const [selectedCell, setSelectedCell] = useState(null);\n\n  const fetchData = () => {\n    fetch(API_URL)\n      .then((response) => response.json())\n      .then((data) => {\n        const currentYear = new Date().getFullYear();\n        const chartConfigs = {};\n\n        const recordsByDate = {};\n        Object.entries(data.activities).forEach(([activity, records]) => {\n          records.forEach((record) => {\n            const formattedDate = parseDate(record.date);\n            if (!recordsByDate[formattedDate]) recordsByDate[formattedDate] = {};\n            recordsByDate[formattedDate][activity] = record.status;\n          });\n        });\n\n        for (let month = 1; month <= 12; month++) {\n          const monthStr = month.toString().padStart(2, \"0\");\n          const dateObjects = getAllDatesInMonth(currentYear, month);\n          const allDates = dateObjects.map((d) => d.isoDate);\n          const categories = dateObjects.map((d) => d.day.toString());\n\n          const activities = new Set();\n          allDates.forEach((date) => {\n            const dailyRecords = recordsByDate[date];\n            if (dailyRecords) {\n              Object.keys(dailyRecords).forEach((a) => activities.add(a));\n            }\n          });\n\n          const series = Array.from(activities).map((activity) => ({\n            name: activity,\n            data: dateObjects.map(({ day, isoDate }) => ({\n              x: day.toString(),\n              y: mapStatusToValue(recordsByDate[isoDate]?.[activity] || \"\"),\n              status: recordsByDate[isoDate]?.[activity] || \"\",\n              activity,\n              date: isoDate, // Asegurarse de que 'date' es correcto\n            })),\n          }));\n\n          chartConfigs[monthStr] = {\n            series,\n            categories,\n          };\n        }\n\n        setCharts(chartConfigs);\n      })\n      .catch((error) => console.error(\"Error fetching data:\", error));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const handleCellClick = (event, chartContext, config) => {\n    const { dataPointIndex, seriesIndex } = config;\n    if (dataPointIndex === undefined || seriesIndex === undefined) return;\n\n    const selectedSeries = charts[selectedMonth]?.series[seriesIndex];\n    if (!selectedSeries) return;\n\n    const clickedData = selectedSeries.data[dataPointIndex];\n\n    // Verificar que clickedData.date tiene el formato correcto (YYYY-MM-DD)\n    const dateParts = clickedData.date.split(\"-\"); // Dividir la fecha en partes: [YYYY, MM, DD]\n    const year = dateParts[0]; // Año\n    const month = dateParts[1].padStart(2, \"0\"); // Mes con 2 dígitos\n    const day = dateParts[2].padStart(2, \"0\"); // Día con 2 dígitos\n\n    // Formatear correctamente la fecha como \"DD-MM-YYYY\"\n    const formattedDate = `${day}-${month}-${year}`;\n\n    setSelectedCell({\n      ...clickedData,\n      formattedDate,  // Asignar la fecha formateada\n    });\n  };\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\", width: \"100%\" }}>\n      <br />\n      <br />\n      <div style={{ display: \"flex\", width: \"100%\" }}>\n        <div style={{ display: \"flex\", marginLeft: \"22%\" }}>\n          <FormControl variant=\"outlined\" style={{ minWidth: 150 }}>\n            <InputLabel>Mes</InputLabel>\n            <Select value={selectedMonth} onChange={(e) => setSelectedMonth(e.target.value)} label=\"Mes\">\n              {Array.from({ length: 12 }, (_, i) => {\n                const month = (i + 1).toString().padStart(2, \"0\");\n                return (\n                  <MenuItem key={month} value={month}>\n                    {new Date(2024, i).toLocaleString(\"default\", { month: \"long\" })}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", flexGrow: 1, gap: \"12px\", marginRight: \"22%\" }}>\n          <span><span style={{ display: \"inline-block\", width: 10, height: 10, backgroundColor: \"#000000\", marginRight: 5 }}></span> Sucky</span>\n          <span><span style={{ display: \"inline-block\", width: 10, height: 10, backgroundColor: \"#FF0000\", marginRight: 5 }}></span> Failed</span>\n          <span><span style={{ display: \"inline-block\", width: 10, height: 10, backgroundColor: \"#FFFF00\", marginRight: 5 }}></span> Regular</span>\n          <span><span style={{ display: \"inline-block\", width: 10, height: 10, backgroundColor: \"#00A100\", marginRight: 5 }}></span> Accomplished</span>\n          <span><span style={{ display: \"inline-block\", width: 10, height: 10, backgroundColor: \"#0000FF\", marginRight: 5 }}></span> Excellence</span>\n        </div>\n      </div>\n\n      {charts[selectedMonth] && (\n        <ReactApexChart\n          options={{\n            chart: { type: \"heatmap\", events: { dataPointSelection: handleCellClick } },\n            plotOptions: {\n              heatmap: {\n                shadeIntensity: 0.5,\n                radius: 0,\n                colorScale: {\n                  ranges: [\n                    { from: 0.001, to: 0.001, name: \"Suck\", color: \"#000000\" },\n                    { from: 0.2, to: 0.2, name: \"Failed\", color: \"#FF0000\" },\n                    { from: 0.5, to: 0.5, name: \"Regular\", color: \"#FFFF00\" },\n                    { from: 1, to: 1, name: \"Accomplished\", color: \"#00A100\" },\n                    { from: 1.2, to: 1.2, name: \"Excellence\", color: \"#0000FF\" },\n                    { from: null, to: null, name: \"No Status\", color: \"#FFFFFF\" },\n                  ],\n                },\n              },\n            },\n            legend: { show: false },\n            dataLabels: { enabled: false },\n            xaxis: {\n              type: \"category\",\n              categories: charts[selectedMonth].categories,\n              labels: {\n                formatter: (value) => value,\n                style: {\n                  fontSize: \"17px\",\n                  fontFamily: \"Arial\",\n                  fontWeight: 400,\n                },\n              },\n            },\n            yaxis: {\n              title: { text: \"\" },\n              labels: {\n                style: {\n                  fontSize: \"19px\",\n                  fontFamily: \"Arial\",\n                  fontWeight: 400,\n                },\n              },\n            },\n          }}\n          series={charts[selectedMonth].series}\n          type=\"heatmap\"\n          height={400}\n          width={1300}\n        />\n      )}\n\n      <StatusModal selectedCell={selectedCell} setSelectedCell={setSelectedCell} refreshData={fetchData} />\n    </div>\n  );\n};\n\nexport default ApexChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}